import QtQuick 2.15
import QtQuick.Controls 2.15 as C
import QtQuick.Layouts 1.15
import QtQuick 2.15 as QQ

// Floating, modeless, resizable window.
// Invoke with: TaskDetailWindow { taskId: someInt; visible: true }

C.ApplicationWindow {
    id: root
    // Title: TaskID - Title - Primary Team - Status (text-only)
    title: titleText()
    visible: false
    modality: Qt.NonModal
    flags: Qt.Window
    width: 1100
    height: 720

    // --- State ---
    property int taskId: -1
    property var lookups: ({ categories: [], priorities: [], task_statuses: [], task_types_by_category: ({}) })
    property var taskDetail: null
    property var taskTeams: []
    property var taskPersonnel: []
    property var taskVehicles: []
    property var taskAircraft: []
    property bool editMode: false
    ListModel { id: narrativeModel }

    // Column sizing for Narrative list
    property int narTimeW: 160
    property int narByW: 160
    property int narTeamW: 140
    property int narCritW: 90
    function _setWidth(prop, w) {
        var mw = 60; var mx = 800;
        var v = Math.max(mw, Math.min(mx, Math.floor(w)));
        if (prop === 'time') narTimeW = v;
        else if (prop === 'by') narByW = v;
        else if (prop === 'team') narTeamW = v;
        else if (prop === 'crit') narCritW = v;
    }
    function narEntryW() {
        // Remaining width inside the row: subtract margins (2*6) and spacing (4*12)
        var vw = (typeof narrativeList !== 'undefined' && narrativeList && narrativeList.width) ? narrativeList.width : 800;
        var used = (narTimeW + narByW + narTeamW + narCritW) + (4*12) + (2*6);
        return Math.max(120, vw - used);
    }
    function _fmtTs(ts) {
        if (!ts) return "";
        try {
            var s = String(ts);
            var dot = s.indexOf('.');
            if (dot > 0) {
                var tz = '';
                var tzStart = (s.indexOf('Z', dot) >= 0) ? s.indexOf('Z', dot) : s.indexOf('+', dot);
                if (tzStart > 0) { tz = s.substring(tzStart); s = s.substring(0, tzStart); }
                s = s.substring(0, dot) + tz;
            }
            var d = new Date(s);
            if (isNaN(d.getTime())) return s;
            function pad(n){ return (n<10?('0'+n):String(n)); }
            var mm = pad(d.getUTCMonth()+1);
            var dd = pad(d.getUTCDate());
            var yy = String(d.getUTCFullYear()).slice(-2);
            var HH = pad(d.getUTCHours());
            var MM = pad(d.getUTCMinutes());
            var SS = pad(d.getUTCSeconds());
            return mm + '-' + dd + '-' + yy + ' ' + HH + ':' + MM + ':' + SS;
        } catch(e) { return String(ts); }
    }
    function _isCrit(v) {
        return v === true || v === 1 || v === '1' || v === 'true' || v === 'True' || v === 'YES' || v === 'Yes';
    }

    signal requestClose()

    function isNewTask() {
        try { return taskDetail && taskDetail.task && taskDetail.task.category === "<New Task>"; } catch(e) { return false }
    }
    function metadataEditable() { return editMode || isNewTask() }
    function primaryTeamObj() {
        if (taskTeams && taskTeams.length > 0) {
            for (var i=0;i<taskTeams.length;i++) if (taskTeams[i].primary === true) return taskTeams[i];
            return taskTeams[0];
        }
        return null;
    }
    function primaryTeamName() { var t = primaryTeamObj(); return t ? (t.team_name||"") : "" }
    function titleText() {
        var idtxt = taskDetail && taskDetail.task ? taskDetail.task.task_id : "";
        var ttitle = taskDetail && taskDetail.task ? taskDetail.task.title : "";
        var prim = primaryTeamName();
        var st = taskDetail && taskDetail.task ? taskDetail.task.status : "";
        var parts = [];
        if (idtxt) parts.push(idtxt);
        if (ttitle) parts.push(ttitle);
        if (prim) parts.push(prim);
        if (st) parts.push(st);
        return parts.length ? parts.join(" - ") : "Task Detail";
    }

    // --- Data loaders (replace with app bridge) ---
    Item { id: dataApi
        function get(url, cb) {
            // Use Python bridge only; no fallback/demo data
            if (typeof taskingsBridge !== 'undefined' && taskingsBridge) {
                try {
                    if (url.endsWith('/lookups')) { cb(taskingsBridge.getLookups()); return }
                    var m
                    if (m = url.match(/\/api\/operations\/taskings\/(\d+)$/)) { cb(taskingsBridge.getTaskDetail(parseInt(m[1]))); return }
                    if (m = url.match(/\/api\/operations\/taskings\/(\d+)\/narrative$/)) { cb(taskingsBridge.listNarrative(parseInt(m[1]))); return }
                    if (m = url.match(/\/api\/operations\/taskings\/(\d+)\/teams$/)) { cb(taskingsBridge.listTeams(parseInt(m[1]))); return }
                    if (m = url.match(/\/api\/operations\/taskings\/(\d+)\/personnel$/)) { cb(taskingsBridge.listPersonnel(parseInt(m[1]))); return }
                    if (m = url.match(/\/api\/operations\/taskings\/(\d+)\/vehicles$/)) { cb(taskingsBridge.listVehicles(parseInt(m[1]))); return }
                    if (m = url.match(/\/api\/operations\/taskings\/(\d+)\/aircraft$/)) { cb(taskingsBridge.listAircraft(parseInt(m[1]))); return }
                } catch (e) { console.log('bridge get error', e) }
            }
            // No bridge available; ignore silently to avoid log spam
            if (cb) cb(null)
        }
        function post(url, payload, cb) {
            if (typeof taskingsBridge !== 'undefined' && taskingsBridge) {
                try {
                    var m
                    if (m = url.match(/\/api\/operations\/taskings\/(\d+)\/narrative$/)) { var saved = taskingsBridge.addNarrative(parseInt(m[1]), payload); if (cb) cb(saved); return }
                    if (m = url.match(/\/api\/operations\/taskings\/(\d+)\/assignment$/)) { var savedA = taskingsBridge.saveAssignment(parseInt(m[1]), payload); if (cb) cb(savedA); return }
                } catch (e) { console.log('bridge post error', e) }
            }
            // No bridge available; ignore
            if (cb) cb(null)
        }
        function patch(url, payload, cb) {
            // No bridge available; ignore
            if (cb) cb(null)
        }
    }
    QtObject { id: lookupsLoader
        function load() {
            dataApi.get("/api/operations/taskings/lookups", function(resp){ if (resp) { root.lookups = resp; if (typeof syncHeaderFromTask === "function") syncHeaderFromTask() } })
        }
    }
    QtObject { id: taskLoader
        function load(id) {
            dataApi.get(`/api/operations/taskings/${id}`, function(resp){ if (resp) root.taskDetail = resp })
        }
    }
    QtObject { id: teamsLoader
        function load(id) {
            dataApi.get(`/api/operations/taskings/${id}/teams`, function(resp){ if (resp && resp.teams) root.taskTeams = resp.teams })
        }
    }
    QtObject { id: narrativeLoader
        function load(id) {
            dataApi.get(`/api/operations/taskings/${id}/narrative`, function(resp){
                narrativeModel.clear()
                var entries = (resp && resp.entries) ? resp.entries : []
                for (var i=0;i<entries.length;i++) {
                    narrativeModel.append(entries[i])
                }
            })
        }
    }
    QtObject { id: personnelLoader
        function load(id) {
            dataApi.get(`/api/operations/taskings/${id}/personnel`, function(resp){
                taskPersonnel = (resp && resp.people) ? resp.people : []
            })
        }
    }
    QtObject { id: vehiclesLoader
        function load(id) {
            dataApi.get(`/api/operations/taskings/${id}/vehicles`, function(resp){ taskVehicles = (resp && resp.vehicles) ? resp.vehicles : [] })
            dataApi.get(`/api/operations/taskings/${id}/aircraft`, function(resp){ taskAircraft = (resp && resp.aircraft) ? resp.aircraft : [] })
        }
    }

    Component.onCompleted: {
        if (typeof taskingsBridge !== 'undefined' && taskingsBridge) {
            lookupsLoader.load()
            if (taskId > 0) { taskLoader.load(taskId); teamsLoader.load(taskId); narrativeLoader.load(taskId); personnelLoader.load(taskId); vehiclesLoader.load(taskId) }
        }
    }

    // --- Header: Responsive Metadata (GridLayout) ---
    header: C.ToolBar {
        // Allow header to expand vertically so wrapped rows remain visible
        implicitHeight: Math.max(44, (metaGrid ? (metaGrid.implicitHeight + 8) : 44))
        GridLayout {
            id: metaGrid
            anchors.fill: parent
            columns: (width > 980 ? 5 : (width > 760 ? 4 : (width > 580 ? 3 : 2)))
            rowSpacing: 6; columnSpacing: 10

            C.ComboBox {
                id: categoryBox; Layout.fillWidth: true; enabled: metadataEditable(); model: root.lookups.categories
                onCurrentTextChanged: {
                    try {
                        var types = (root.lookups && root.lookups.task_types_by_category) ? root.lookups.task_types_by_category[currentText] : []
                        typeBox.model = types && types.length ? types : ["(select category)"]
                        // reset selection when category changes
                        typeBox.currentIndex = 0
                    } catch(e) { /* ignore */ }
                }
            }
            C.ComboBox { id: typeBox; Layout.fillWidth: true; enabled: metadataEditable(); model: ["(filtered by category)"] }
            C.ComboBox { id: priorityBox; Layout.fillWidth: true; enabled: metadataEditable(); model: root.lookups.priorities }
            C.ComboBox { id: statusBox; Layout.fillWidth: true; model: root.lookups.task_statuses }
            C.TextField { id: taskIdField; Layout.fillWidth: true; placeholderText: "Task ID"; readOnly: !metadataEditable() }
        }
    }

    footer: C.ToolBar {
        RowLayout { anchors.fill: parent; spacing: 8
            C.Button { text: "Close"; onClicked: { root.requestClose(); root.close() } }
        }
    }

    // --- Body ---
    ColumnLayout {
        anchors.fill: parent
        spacing: 10

        // Primary Assignment (read-only) — 2x2 grid with labels row
        ColumnLayout { Layout.fillWidth: true
            // Column headers aligned to the grid columns below
            RowLayout { Layout.fillWidth: true; spacing: 18
                C.Label { text: "Primary Team"; color: "#666"; Layout.alignment: Qt.AlignLeft }
                Item { Layout.fillWidth: true }
                C.Label { text: "Team Contact"; color: "#666"; Layout.alignment: Qt.AlignRight }
            }
            GridLayout {
                Layout.fillWidth: true
                columns: 2; rowSpacing: 6; columnSpacing: 10
                // Upper-left: Team name (expands)
                C.TextField {
                    readOnly: true
                    text: primaryTeamName()
                    Layout.fillWidth: true
                }
                // Upper-right: empty cell to form a 2x2 with three fields
                Item { Layout.preferredWidth: 140 }
                // Bottom-left: Team leader name
                C.TextField {
                    readOnly: true
                    text: (primaryTeamObj() ? (primaryTeamObj().team_leader||"") : "")
                    Layout.fillWidth: true
                }
                // Bottom-right: Team leader phone
                C.TextField {
                    readOnly: true
                    text: (primaryTeamObj() ? (primaryTeamObj().team_leader_phone||"") : "")
                    Layout.preferredWidth: 220
                }
            }
        }

        // Title Field
        C.TextField { id: titleField; Layout.fillWidth: true; placeholderText: "Task Title"; readOnly: !metadataEditable() }

        // Location / Assignment name
        C.TextField { id: locationField; Layout.fillWidth: true; placeholderText: "Location / Assignment"; readOnly: !metadataEditable() }

        // Narrative Quick Entry
        RowLayout {
            Layout.fillWidth: true
            C.TextArea {
                id: narrativeEntry; Layout.fillWidth: true; placeholderText: "Type narrative; Enter=submit, Shift+Enter=newline"; wrapMode: TextEdit.Wrap
                Keys.onPressed: function(e){
                    if (e.key === Qt.Key_Return || e.key === Qt.Key_Enter) {
                        if (e.modifiers & Qt.ShiftModifier) { insert("\n"); e.accepted = true; }
                        else { submitNarrative(); e.accepted = true; }
                    }
                }
            }
            C.ComboBox {
                id: narCritical
                // shrink to content width (label + padding)
                width: (contentItem && contentItem.implicitWidth ? contentItem.implicitWidth + 24 : 100)
                model: ["No","Yes"]; currentIndex: 0
            }
            C.Button { text: "Add"; onClicked: submitNarrative }
        }

        // Action Buttons
        RowLayout { Layout.fillWidth: true; spacing: 8
            C.Button { text: editMode ? "Editing..." : "Edit"; onClicked: editMode = true }
            C.Button { text: "Save"; enabled: editMode; onClicked: { /* TODO persist */ editMode = false } }
            C.Button { text: "Cancel"; enabled: editMode; onClicked: { /* TODO revert */ editMode = false } }
            Item { Layout.fillWidth: true }
            C.Button { text: "Flag: Needs Assistance" }
            C.Button { text: "Add Clue" }
            C.Button { text: "Export ICS-214" }
            C.Button { text: "Assign Team"
                onClicked: {
                    if (!root.taskId || root.taskId < 1) return;
                    // Minimal flow: create a new team assignment with autogenerated team and sortie
                    var payload = { sortie_number: "T" + root.taskId + "-" + (teamList.count+1), primary: (teamList.count===0) };
                    var resp = taskingsBridge && taskingsBridge.addTeam ? taskingsBridge.addTeam(root.taskId, payload) : null;
                    if (resp && resp.teams) { root.taskTeams = resp.teams }
                }
            }
            C.Button { text: "Change Status" }
            C.Button { text: "Quick Message" }
        }

        // Tabs
        ColumnLayout { Layout.fillWidth: true; Layout.fillHeight: true
            C.TabBar { id: tabbar; Layout.fillWidth: true
                C.TabButton { text: "Narrative" }
                C.TabButton { text: "Teams" }
                C.TabButton { text: "Personnel" }
                C.TabButton { text: "Vehicles" }
                C.TabButton { text: "Assignment Details" }
                C.TabButton { text: "Communications" }
                C.TabButton { text: "Debriefing" }
                C.TabButton { text: "Log" }
                C.TabButton { text: "Attachments/Forms" }
                C.TabButton { text: "Planning" }
            }

            StackLayout { Layout.fillWidth: true; Layout.fillHeight: true; currentIndex: tabbar.currentIndex
                // 1. Narrative (embedded list)
                Item { Layout.fillWidth: true; Layout.fillHeight: true
                    C.ScrollView { anchors.fill: parent
                        ListView {
                            id: narrativeList
                            anchors.fill: parent
                            model: narrativeModel
                            header: Rectangle { height: 32; color: "#000"; width: parent.width
                                Row { anchors.fill: parent; anchors.margins: 6; spacing: 12
                                    // Time (resizable)
                                    Rectangle { width: narTimeW; color: "transparent"
                                        C.Label { anchors.centerIn: parent; text: "Date/Time"; color: "#fff" }
                                        MouseArea { anchors.right: parent.right; anchors.top: parent.top; anchors.bottom: parent.bottom; width: 6; cursorShape: Qt.SplitHCursor
                                            property real __startX; property real __w
                                            onPressed: { __startX = mouse.x; __w = narTimeW }
                                            onPositionChanged: { if (pressed) _setWidth('time', __w + (mouse.x-__startX)) }
                                        }
                                    }
                                    // Entry (fills remaining)
                                    Rectangle { width: narEntryW(); color: "transparent"
                                        C.Label { anchors.centerIn: parent; text: "Entry"; color: "#fff" }
                                    }
                                    // Entered By (resizable)
                                    Rectangle { width: narByW; color: "transparent"
                                        C.Label { anchors.centerIn: parent; text: "Entered By"; color: "#fff" }
                                        MouseArea { anchors.right: parent.right; anchors.top: parent.top; anchors.bottom: parent.bottom; width: 6; cursorShape: Qt.SplitHCursor
                                            property real __startX; property real __w
                                            onPressed: { __startX = mouse.x; __w = narByW }
                                            onPositionChanged: { if (pressed) _setWidth('by', __w + (mouse.x-__startX)) }
                                        }
                                    }
                                    // Team (resizable)
                                    Rectangle { width: narTeamW; color: "transparent"
                                        C.Label { anchors.centerIn: parent; text: "Team"; color: "#fff" }
                                        MouseArea { anchors.right: parent.right; anchors.top: parent.top; anchors.bottom: parent.bottom; width: 6; cursorShape: Qt.SplitHCursor
                                            property real __startX; property real __w
                                            onPressed: { __startX = mouse.x; __w = narTeamW }
                                            onPositionChanged: { if (pressed) _setWidth('team', __w + (mouse.x-__startX)) }
                                        }
                                    }
                                    // Critical (resizable)
                                    Rectangle { width: narCritW; color: "transparent"
                                        C.Label { anchors.centerIn: parent; text: "Critical"; color: "#fff" }
                                        MouseArea { anchors.right: parent.right; anchors.top: parent.top; anchors.bottom: parent.bottom; width: 6; cursorShape: Qt.SplitHCursor
                                            property real __startX; property real __w
                                            onPressed: { __startX = mouse.x; __w = narCritW }
                                            onPositionChanged: { if (pressed) _setWidth('crit', __w + (mouse.x-__startX)) }
                                        }
                                    }
                                }
                            }
                            delegate: Rectangle {
                                width: ListView.view.width; height: 36
                                color: (_isCrit(model.critical_flag) || _isCrit(model.critical)) ? "#ffe5e5" : "#ffffff"
                                border.color: "#c0c0c0"
                                Row { anchors.fill: parent; anchors.margins: 6; spacing: 12
                                    C.Label { text: _fmtTs(model.timestamp || model.time || ""); width: narTimeW }
                                    C.Label { text: (model.entry_text || model.text || ""); width: narEntryW() }
                                    C.Label { text: (model.entered_by || model.by || ""); width: narByW }
                                    C.Label { text: (model.team_name || model.team || ""); width: narTeamW }
                                    C.Label { text: (_isCrit(model.critical_flag || model.critical) ? "Yes" : "No"); width: narCritW; horizontalAlignment: Text.AlignHCenter }
                                    C.ToolButton {
                                        text: "214+"
                                        onClicked: { try { taskingsBridge.addIcs214Entry(String(model.entry_text || model.text || ""), _isCrit(model.critical_flag || model.critical)) } catch(e) {} }
                                    }
                                }
                                // Right-click menu (debug delete)
                                MouseArea {
                                    anchors.fill: parent; acceptedButtons: Qt.RightButton
                                    onPressed: function(m){ if (m.button === Qt.RightButton) { narMenu.rowIndex = index; narMenu.entryId = (model.id || -1); narMenu.popup() } }
                                }
                            }
                            C.Menu { id: narMenu; property int rowIndex: -1; property int entryId: -1
                                C.MenuItem { text: "Delete Entry (debug)"; onTriggered: {
                                        if (entryId > 0) {
                                            var ok = taskingsBridge.deleteNarrative(root.taskId, entryId)
                                            if (ok) { narrativeModel.remove(rowIndex); }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                
                // 2. Teams
                Item { Layout.fillWidth: true; Layout.fillHeight: true
                    // Column widths and sorting
                    property int colPrimW: 28
                    property int colSortieW: 100
                    property int colNameW: 180
                    property int colLeaderW: 180
                    property int colPhoneW: 130
                    property int colStatusW: 120
                    property int colTsW: 120
                    property string sortKey: "id"
                    property bool sortAsc: true
                    function _fmtDate(ts){
                        try{ var d = new Date(ts); if (isNaN(d.getTime())) return ""; function pad(n){return n<10?('0'+n):n}
                            return pad(d.getUTCMonth()+1)+"-"+pad(d.getUTCDate())+"-"+String(d.getUTCFullYear()).slice(-2) }catch(e){ return "" }
                    }
                    function _fmtTime(ts){
                        try{ var d = new Date(ts); if (isNaN(d.getTime())) return ""; function pad(n){return n<10?('0'+n):n}
                            return pad(d.getUTCHours())+":"+pad(d.getUTCMinutes())+":"+pad(d.getUTCSeconds()) }catch(e){ return "" }
                    }
                    function sortTeams(key){
                        try{
                            sortKey = key; sortAsc = !sortAsc;
                            var arr = (root.taskTeams||[]).slice(0)
                            arr.sort(function(a,b){ var av=a[key]||""; var bv=b[key]||""; if (av==bv) return 0; return (av<bv? (sortAsc?-1:1) : (sortAsc?1:-1)) })
                            root.taskTeams = arr
                        }catch(e){}
                    }
                    ColumnLayout { anchors.fill: parent
                        RowLayout { Layout.fillWidth: true; spacing: 8
                            C.Button { text: "Add Team"; onClicked: {
                                    var all = taskingsBridge.listAllTeams();
                                    // Simple prompt for now: pick first team not already assigned
                                    if (all && all.teams && all.teams.length){
                                        var existing = {}
                                        for (var i=0;i<root.taskTeams.length;i++){ existing[root.taskTeams[i].team_id] = true }
                                        var picked = null
                                        for (var j=0;j<all.teams.length;j++){ var tm = all.teams[j]; if (!existing[tm.team_id]) { picked = tm; break } }
                                        var payload = { team_id: picked ? picked.team_id : null, primary: (teamList.count===0) }
                                        var resp = taskingsBridge.addTeam(root.taskId, payload)
                                        if (resp && resp.teams) root.taskTeams = resp.teams
                                    }
                                }
                            }
                            C.Button { text: "Edit Team" }
                            C.Button { text: "Change Status"; onClicked: { if (teamList.currentIndex>=0) teamMenu.changeStatus(teamList.currentIndex) } }
                            C.Button { text: "Set Primary"; onClicked: { if (teamList.currentIndex>=0) teamMenu.setPrimary(teamList.currentIndex) } }
                            Item { Layout.fillWidth: true }
                        }
                        C.ScrollView { Layout.fillWidth: true; Layout.fillHeight: true
                            ListView {
                                id: teamList
                                anchors.fill: parent
                                clip: true
                                model: root.taskTeams
                                header: Rectangle { height: 32; width: parent.width; color: "#000"
                                    Row { anchors.fill: parent; anchors.margins: 6; spacing: 8
                                        Rectangle { width: colPrimW; color: "transparent"; C.Label { anchors.centerIn: parent; text: "P"; color: "#fff" } }
                                        Rectangle { width: colSortieW; color: "transparent"
                                            C.Label { anchors.centerIn: parent; text: "Sortie"; color: "#fff" }
                                            MouseArea { anchors.fill: parent; onDoubleClicked: sortTeams('sortie_number') }
                                            MouseArea { anchors.right: parent.right; anchors.top: parent.top; anchors.bottom: parent.bottom; width: 6; cursorShape: Qt.SplitHCursor
                                                property real __sx; property real __w
                                                onPressed: { __sx = mouse.x; __w = colSortieW }
                                                onPositionChanged: { if (pressed) { var v = __w + (mouse.x-__sx); if (v>60 && v<500) colSortieW = v } }
                                            }
                                        }
                                        Rectangle { width: colNameW; color: "transparent"
                                            C.Label { anchors.centerIn: parent; text: "Team Name"; color: "#fff" }
                                            MouseArea { anchors.fill: parent; onDoubleClicked: sortTeams('team_name') }
                                            MouseArea { anchors.right: parent.right; anchors.top: parent.top; anchors.bottom: parent.bottom; width: 6; cursorShape: Qt.SplitHCursor
                                                property real __sx; property real __w
                                                onPressed: { __sx = mouse.x; __w = colNameW }
                                                onPositionChanged: { if (pressed) { var v = __w + (mouse.x-__sx); if (v>100 && v<600) colNameW = v } }
                                            }
                                        }
                                        Rectangle { width: colLeaderW; color: "transparent"
                                            C.Label { anchors.centerIn: parent; text: "Team Leader"; color: "#fff" }
                                            MouseArea { anchors.fill: parent; onDoubleClicked: sortTeams('team_leader') }
                                            MouseArea { anchors.right: parent.right; anchors.top: parent.top; anchors.bottom: parent.bottom; width: 6; cursorShape: Qt.SplitHCursor
                                                property real __sx; property real __w
                                                onPressed: { __sx = mouse.x; __w = colLeaderW }
                                                onPositionChanged: { if (pressed) { var v = __w + (mouse.x-__sx); if (v>100 && v<600) colLeaderW = v } }
                                            }
                                        }
                                        Rectangle { width: colPhoneW; color: "transparent"
                                            C.Label { anchors.centerIn: parent; text: "Phone"; color: "#fff" }
                                            MouseArea { anchors.right: parent.right; anchors.top: parent.top; anchors.bottom: parent.bottom; width: 6; cursorShape: Qt.SplitHCursor
                                                property real __sx; property real __w
                                                onPressed: { __sx = mouse.x; __w = colPhoneW }
                                                onPositionChanged: { if (pressed) { var v = __w + (mouse.x-__sx); if (v>100 && v<300) colPhoneW = v } }
                                            }
                                        }
                                        Rectangle { width: colStatusW; color: "transparent"
                                            C.Label { anchors.centerIn: parent; text: "Status"; color: "#fff" }
                                            MouseArea { anchors.right: parent.right; anchors.top: parent.top; anchors.bottom: parent.bottom; width: 6; cursorShape: Qt.SplitHCursor
                                                property real __sx; property real __w
                                                onPressed: { __sx = mouse.x; __w = colStatusW }
                                                onPositionChanged: { if (pressed) { var v = __w + (mouse.x-__sx); if (v>100 && v<240) colStatusW = v } }
                                            }
                                        }
                                        Rectangle { width: colTsW; color: "transparent"; C.Label { anchors.centerIn: parent; text: "Assigned"; color: "#fff" } }
                                        Rectangle { width: colTsW; color: "transparent"; C.Label { anchors.centerIn: parent; text: "Briefed"; color: "#fff" } }
                                        Rectangle { width: colTsW; color: "transparent"; C.Label { anchors.centerIn: parent; text: "Enroute"; color: "#fff" } }
                                        Rectangle { width: colTsW; color: "transparent"; C.Label { anchors.centerIn: parent; text: "Arrival"; color: "#fff" } }
                                        Rectangle { width: colTsW; color: "transparent"; C.Label { anchors.centerIn: parent; text: "Discovery"; color: "#fff" } }
                                        Rectangle { width: colTsW; color: "transparent"; C.Label { anchors.centerIn: parent; text: "Complete"; color: "#fff" } }
                                    }
                                }
                                delegate: Rectangle {
                                    width: teamList.width; height: 40
                                    color: (index % 2 ? "#fafafa" : "#ffffff"); border.color: "#ddd"
                                    Row { anchors.fill: parent; anchors.margins: 6; spacing: 8
                                        // Primary checkbox
                                        C.CheckBox { width: colPrimW; checked: !!model.primary; enabled: true
                                            onToggled: if (checked) { var res = taskingsBridge.setPrimary(root.taskId, model.id); if (res && res.teams) root.taskTeams = res.teams }
                                        }
                                        // Sortie (editable)
                                        C.TextField { text: (model.sortie_number||""); width: colSortieW; onEditingFinished: taskingsBridge.updateSortie(model.id, text) }
                                        // Team name
                                        C.Label { text: (model.team_name||""); width: colNameW }
                                        // Leader name
                                        C.Label { text: (model.team_leader||""); width: colLeaderW }
                                        // Phone
                                        C.Label { text: (model.team_leader_phone||""); width: colPhoneW }
                                        // Status dropdown (limited by category)
                                        C.ComboBox { width: colStatusW
                                            model: (function(){
                                                try { var cat = root.taskDetail && root.taskDetail.task ? root.taskDetail.task.category : "Other";
                                                      var m = root.lookups && root.lookups.team_status_by_category ? root.lookups.team_status_by_category[cat] : [];
                                                      return m || []
                                                } catch(e) { return [] }
                                            })()
                                            currentIndex: {
                                                var st = String(model.status||"").toLowerCase();
                                                var opts = (function(){ try { var cat = root.taskDetail && root.taskDetail.task ? root.taskDetail.task.category : "Other"; return root.lookups.team_status_by_category[cat] || [] }catch(e){ return [] }})();
                                                for (var i=0;i<opts.length;i++){ if (String(opts[i]).toLowerCase()===st) return i } return -1
                                            }
                                            onActivated: function(i){
                                                var val = (typeof textAt === 'function') ? textAt(i) : (currentText || "");
                                                var ok = taskingsBridge.changeTeamStatus(model.id, val);
                                                if (ok) {
                                                    var resp = taskingsBridge.listTeams(root.taskId);
                                                    if (resp && resp.teams) root.taskTeams = resp.teams;
                                                }
                                            }
                                        }
                                        // Timestamps (two-row: date/time)
                                        Column { width: colTsW; spacing: 0
                                            C.Label { text: _fmtDate(model.assigned_ts||""); horizontalAlignment: Text.AlignHCenter }
                                            C.Label { text: _fmtTime(model.assigned_ts||""); color: "#666"; horizontalAlignment: Text.AlignHCenter }
                                        }
                                        Column { width: colTsW; spacing: 0
                                            C.Label { text: _fmtDate(model.briefed_ts||""); horizontalAlignment: Text.AlignHCenter }
                                            C.Label { text: _fmtTime(model.briefed_ts||""); color: "#666"; horizontalAlignment: Text.AlignHCenter }
                                        }
                                        Column { width: colTsW; spacing: 0
                                            C.Label { text: _fmtDate(model.enroute_ts||""); horizontalAlignment: Text.AlignHCenter }
                                            C.Label { text: _fmtTime(model.enroute_ts||""); color: "#666"; horizontalAlignment: Text.AlignHCenter }
                                        }
                                        Column { width: colTsW; spacing: 0
                                            C.Label { text: _fmtDate(model.arrival_ts||""); horizontalAlignment: Text.AlignHCenter }
                                            C.Label { text: _fmtTime(model.arrival_ts||""); color: "#666"; horizontalAlignment: Text.AlignHCenter }
                                        }
                                        Column { width: colTsW; spacing: 0
                                            C.Label { text: _fmtDate(model.discovery_ts||""); horizontalAlignment: Text.AlignHCenter }
                                            C.Label { text: _fmtTime(model.discovery_ts||""); color: "#666"; horizontalAlignment: Text.AlignHCenter }
                                        }
                                        Column { width: colTsW; spacing: 0
                                            C.Label { text: _fmtDate(model.complete_ts||""); horizontalAlignment: Text.AlignHCenter }
                                            C.Label { text: _fmtTime(model.complete_ts||""); color: "#666"; horizontalAlignment: Text.AlignHCenter }
                                        }
                                    }
                                    MouseArea { anchors.fill: parent; acceptedButtons: Qt.RightButton
                                        onPressed: function(m){ if(m.button===Qt.RightButton){ teamMenu.rowIndex=index; teamMenu.popup() } }
                                        onClicked: { teamList.currentIndex = index }
                                    }
                                }
                            }
                        }
                        C.Menu {
                            id: teamMenu; property int rowIndex: -1
                            function changeStatus(idx){ try { var item = root.taskTeams[idx]; if (!item) return; /* Open inline combo is preferred; keep stub here */ } catch(e){} }
                            function setPrimary(idx){ try { var item = root.taskTeams[idx]; if (!item) return; var res = taskingsBridge.setPrimary(root.taskId, item.id); if (res && res.teams) root.taskTeams = res.teams } catch(e){} }
                            C.MenuItem { text: "Change Status"; onTriggered: changeStatus(rowIndex) }
                            C.MenuItem { text: "Open Team Detail Window"; onTriggered: { try { var item = root.taskTeams[rowIndex]; if (item && item.team_id) taskingsBridge.openTeamDetail(item.team_id) } catch(e){} } }
                            C.MenuItem { text: "Set as Primary"; onTriggered: setPrimary(rowIndex) }
                            C.MenuSeparator {}
                            C.MenuItem { text: "Remove Team"; onTriggered: { try { var item = root.taskTeams[rowIndex]; if (!item) return; if (taskingsBridge.removeTeam(item.id)) { root.taskTeams.splice(rowIndex,1) } } catch(e){} } }
                        }
                    }
                }

                // 3. Personnel
                Item { Layout.fillWidth: true; Layout.fillHeight: true
                    property int colActW: 40
                    property int colNameW: 200
                    property int colIdW: 80
                    property int colRankW: 100
                    property int colRoleW: 140
                    property int colOrgW: 160
                    property int colPhoneW: 140
                    property int colTeamW: 160
                    property string sortKey: "name"
                    property bool sortAsc: true
                    function sortPeople(key){ try{ sortKey=key; sortAsc=!sortAsc; var arr=(taskPersonnel||[]).slice(0); arr.sort(function(a,b){ var av=a[key]||""; var bv=b[key]||""; if(av==bv) return 0; return (av<bv?(sortAsc?-1:1):(sortAsc?1:-1))}); taskPersonnel=arr }catch(e){} }
                    ColumnLayout { anchors.fill: parent
                        C.ScrollView { Layout.fillWidth: true; Layout.fillHeight: true
                            ListView {
                                id: pplList
                                anchors.fill: parent
                                model: taskPersonnel
                                clip: true
                                header: Rectangle { height: 32; width: parent.width; color: "#000"
                                    Row { anchors.fill: parent; anchors.margins: 6; spacing: 8
                                        Rectangle { width: colActW; color: "transparent"; C.Label { anchors.centerIn: parent; text: "A"; color: "#fff" } }
                                        Rectangle { width: colNameW; color: "transparent"; C.Label { anchors.centerIn: parent; text: "Name"; color: "#fff" } ; MouseArea { anchors.fill: parent; onDoubleClicked: sortPeople('name') } }
                                        Rectangle { width: colIdW; color: "transparent"; C.Label { anchors.centerIn: parent; text: "ID"; color: "#fff" } }
                                        Rectangle { width: colRankW; color: "transparent"; C.Label { anchors.centerIn: parent; text: "Rank"; color: "#fff" } }
                                        Rectangle { width: colRoleW; color: "transparent"; C.Label { anchors.centerIn: parent; text: "Role"; color: "#fff" } ; MouseArea { anchors.fill: parent; onDoubleClicked: sortPeople('role') } }
                                        Rectangle { width: colOrgW; color: "transparent"; C.Label { anchors.centerIn: parent; text: "Organization"; color: "#fff" } }
                                        Rectangle { width: colPhoneW; color: "transparent"; C.Label { anchors.centerIn: parent; text: "Phone"; color: "#fff" } }
                                        Rectangle { width: colTeamW; color: "transparent"; C.Label { anchors.centerIn: parent; text: "Team"; color: "#fff" } ; MouseArea { anchors.fill: parent; onDoubleClicked: sortPeople('team_name') } }
                                    }
                                }
                                delegate: Rectangle {
                                    width: pplList.width; height: 36
                                    color: index % 2 ? "#fafafa" : "#ffffff"; border.color: "#ddd"
                                    Row { anchors.fill: parent; anchors.margins: 6; spacing: 8
                                        C.CheckBox { width: colActW; checked: !!model.active; enabled: false }
                                        C.Label { text: (model.name||""); width: colNameW }
                                        C.Label { text: String(model.id||""); width: colIdW }
                                        C.Label { text: (model.rank||""); width: colRankW }
                                        C.Label { text: (model.role||""); width: colRoleW }
                                        C.Label { text: (model.organization||""); width: colOrgW }
                                        C.Label { text: (model.phone||""); width: colPhoneW }
                                        C.Label { text: (model.team_name||""); width: colTeamW }
                                    }
                                }
                            }
                        }
                    }
                }

                // 4. Vehicles
                Item { Layout.fillWidth: true; Layout.fillHeight: true
                    property int colActW: 40
                    property int colIdW: 80
                    property int colPlateW: 140
                    property int colTypeW: 160
                    property int colOrgW: 180
                    property int colTeamW: 160
                    property string sortKey: "id"
                    property bool sortAsc: true
                    function sortVeh(key){ try{ sortKey=key; sortAsc=!sortAsc; var arr=(taskVehicles||[]).slice(0); arr.sort(function(a,b){ var av=a[key]||""; var bv=b[key]||""; if(av==bv) return 0; return (av<bv?(sortAsc?-1:1):(sortAsc?1:-1))}); taskVehicles=arr }catch(e){} }
                    ColumnLayout { anchors.fill: parent; spacing: 8
                        // Ground vehicles table
                        C.Label { text: "Vehicles"; font.bold: true; visible: (taskVehicles && taskVehicles.length>0) }
                        C.ScrollView { Layout.fillWidth: true; Layout.fillHeight: (taskAircraft && taskAircraft.length>0 ? 0.55 : 1); visible: (taskVehicles && taskVehicles.length>0)
                            ListView {
                                id: vehList
                                anchors.fill: parent
                                model: taskVehicles
                                clip: true
                                header: Rectangle { height: 32; width: parent.width; color: "#000"
                                    Row { anchors.fill: parent; anchors.margins: 6; spacing: 8
                                        Rectangle { width: colActW; color: "transparent"; C.Label { anchors.centerIn: parent; text: "A"; color: "#fff" } }
                                        Rectangle { width: colIdW; color: "transparent"; C.Label { anchors.centerIn: parent; text: "ID"; color: "#fff" } }
                                        Rectangle { width: colPlateW; color: "transparent"; C.Label { anchors.centerIn: parent; text: "License Plate"; color: "#fff" } ; MouseArea { anchors.fill: parent; onDoubleClicked: sortVeh('license_plate') } }
                                        Rectangle { width: colTypeW; color: "transparent"; C.Label { anchors.centerIn: parent; text: "Type"; color: "#fff" } ; MouseArea { anchors.fill: parent; onDoubleClicked: sortVeh('type') } }
                                        Rectangle { width: colOrgW; color: "transparent"; C.Label { anchors.centerIn: parent; text: "Organization"; color: "#fff" } }
                                        Rectangle { width: colTeamW; color: "transparent"; C.Label { anchors.centerIn: parent; text: "Team"; color: "#fff" } ; MouseArea { anchors.fill: parent; onDoubleClicked: sortVeh('team_name') } }
                                    }
                                }
                                delegate: Rectangle {
                                    width: vehList.width; height: 36
                                    color: index % 2 ? "#fafafa" : "#ffffff"; border.color: "#ddd"
                                    Row { anchors.fill: parent; anchors.margins: 6; spacing: 8
                                        C.CheckBox { width: colActW; checked: !!model.active; enabled: false }
                                        C.Label { text: String(model.id||""); width: colIdW }
                                        C.Label { text: (model.license_plate||""); width: colPlateW }
                                        C.Label { text: (model.type||""); width: colTypeW }
                                        C.Label { text: (model.organization||""); width: colOrgW }
                                        C.Label { text: (model.team_name||""); width: colTeamW }
                                    }
                                }
                            }
                        }

                        // Aircraft table (separate)
                        C.Label { text: "Aircraft"; font.bold: true; visible: (taskAircraft && taskAircraft.length>0) }
                        C.ScrollView { Layout.fillWidth: true; Layout.fillHeight: (taskVehicles && taskVehicles.length>0 ? 0.45 : 1); visible: (taskAircraft && taskAircraft.length>0)
                            ListView {
                                id: acList
                                anchors.fill: parent
                                model: taskAircraft
                                clip: true
                                header: Rectangle { height: 32; width: parent.width; color: "#000"
                                    Row { anchors.fill: parent; anchors.margins: 6; spacing: 8
                                        Rectangle { width: colActW; color: "transparent"; C.Label { anchors.centerIn: parent; text: "A"; color: "#fff" } }
                                        Rectangle { width: 140; color: "transparent"; C.Label { anchors.centerIn: parent; text: "Callsign"; color: "#fff" } }
                                        Rectangle { width: 140; color: "transparent"; C.Label { anchors.centerIn: parent; text: "Tail #"; color: "#fff" } }
                                        Rectangle { width: colTypeW; color: "transparent"; C.Label { anchors.centerIn: parent; text: "Type"; color: "#fff" } }
                                        Rectangle { width: colOrgW; color: "transparent"; C.Label { anchors.centerIn: parent; text: "Organization"; color: "#fff" } }
                                        Rectangle { width: colTeamW; color: "transparent"; C.Label { anchors.centerIn: parent; text: "Team"; color: "#fff" } }
                                    }
                                }
                                delegate: Rectangle {
                                    width: acList.width; height: 36
                                    color: index % 2 ? "#fafafa" : "#ffffff"; border.color: "#ddd"
                                    Row { anchors.fill: parent; anchors.margins: 6; spacing: 8
                                        C.CheckBox { width: colActW; checked: !!model.active; enabled: false }
                                        C.Label { text: (model.callsign||""); width: 140 }
                                        C.Label { text: (model.tail_number||""); width: 140 }
                                        C.Label { text: (model.type||""); width: colTypeW }
                                        C.Label { text: (model.organization||""); width: colOrgW }
                                        C.Label { text: (model.team_name||""); width: colTeamW }
                                    }
                                }
                            }
                        }
                    }
                }

                // 5. Assignment Details
                Item { ColumnLayout { anchors.fill: parent; spacing: 10
                        property var aData: ({})
                        property var aDataBaseline: ({})
                        property bool aDirty: false
                        function loadAssignment(){ if (root.taskId>0) dataApi.get(`/api/operations/taskings/${root.taskId}/assignment`, function(resp){ aData = resp || {}; aDataBaseline = JSON.parse(JSON.stringify(aData)); bindFromData(); aDirty=false }) }
                        function bindFromData(){
                            try {
                                // Ground
                                g_prev.text = aData.ground?.previous_search_efforts || ""
                                g_pres.text = aData.ground?.present_search_efforts || ""
                                g_time.text = aData.ground?.time_allocated || ""
                                g_size.text = aData.ground?.size_of_assignment || ""
                                g_pod_resp.currentIndex = idxOf(["High","Medium","Low"], aData.ground?.expected_pod?.responsive)
                                g_pod_unresp.currentIndex = idxOf(["High","Medium","Low"], aData.ground?.expected_pod?.unresponsive)
                                g_pod_clues.currentIndex = idxOf(["High","Medium","Low"], aData.ground?.expected_pod?.clues)
                                g_drop.text = aData.ground?.drop_off_instructions || ""
                                g_pick.text = aData.ground?.pickup_instructions || ""
                                // Air
                                a_aoo.text = aData.air?.wmirs_aoo || ""
                                a_dep.text = aData.air?.dep_airport || ""
                                a_dest.text = aData.air?.dest_airport || ""
                                a_etd.text = aData.air?.etd || ""
                                a_ete.text = aData.air?.ete || ""
                                a_other_ac.text = aData.air?.other_aircraft || ""
                                a_gt_in_area.text = aData.air?.ground_teams || ""
                                a_obj.text = aData.air?.sortie_objectives || ""
                                a_deliv.text = aData.air?.sortie_deliverables || ""
                                a_actions.text = aData.air?.actions_to_be_taken || ""
                                a_route.text = aData.air?.route_of_flight || ""
                                a_alt.text = aData.air?.altitude || ""
                                a_speed.text = aData.air?.airspeed || ""
                                a_sep.text = aData.air?.aircraft_separation || ""
                                a_emerg.text = aData.air?.emergency_fields || ""
                                a_mlats.text = aData.air?.mlat_routes || ""
                                a_haz.text = aData.air?.hazards || ""
                                a_sp_pattern.text = aData.air?.search_plan?.pattern || ""
                                a_sp_vis.text = aData.air?.search_plan?.visibility_nm || ""
                                a_sp_alt.text = aData.air?.search_plan?.altitude_agl || ""
                                a_sp_speed.text = aData.air?.search_plan?.speed_kts || ""
                                a_sp_track.text = aData.air?.search_plan?.track_spacing_nm || ""
                                a_sp_terrain.currentIndex = idxOf(["Flat","Rolling Hills","Rugged Hills","Mountainous"], aData.air?.search_plan?.terrain)
                                a_sp_cover.currentIndex = idxOf(["Open","Moderate","Heavy","Light Snow","Heavy Snow"], aData.air?.search_plan?.cover)
                                a_sp_turb.currentIndex = idxOf(["Light","Moderate","Heavy"], aData.air?.search_plan?.turbulence)
                                a_sp_pod.text = aData.air?.search_plan?.pod || ""
                                a_sp_tts.text = aData.air?.search_plan?.time_to_search || ""
                                a_sp_ts.text = aData.air?.search_plan?.time_started || ""
                                a_sp_te.text = aData.air?.search_plan?.time_ended || ""
                                a_sp_tisa.text = aData.air?.search_plan?.time_in_area || ""
                                a_sp_tfsa.text = aData.air?.search_plan?.time_from_area || ""
                                a_sp_total.text = aData.air?.search_plan?.total_sortie_time || ""
                            } catch(e) {}
                        }
                        function idxOf(arr, val){ try{ var v=String(val||"").toLowerCase(); for (var i=0;i<arr.length;i++) if (String(arr[i]).toLowerCase()===v) return i; }catch(e){} return -1 }
                        function collectData(){
                            return {
                                ground: {
                                    previous_search_efforts: g_prev.text,
                                    present_search_efforts: g_pres.text,
                                    time_allocated: g_time.text,
                                    size_of_assignment: g_size.text,
                                    expected_pod: { responsive: g_pod_resp.currentText, unresponsive: g_pod_unresp.currentText, clues: g_pod_clues.currentText },
                                    drop_off_instructions: g_drop.text,
                                    pickup_instructions: g_pick.text,
                                },
                                air: {
                                    wmirs_aoo: a_aoo.text,
                                    dep_airport: a_dep.text,
                                    dest_airport: a_dest.text,
                                    etd: a_etd.text,
                                    ete: a_ete.text,
                                    other_aircraft: a_other_ac.text,
                                    ground_teams: a_gt_in_area.text,
                                    sortie_objectives: a_obj.text,
                                    sortie_deliverables: a_deliv.text,
                                    actions_to_be_taken: a_actions.text,
                                    route_of_flight: a_route.text,
                                    altitude: a_alt.text,
                                    airspeed: a_speed.text,
                                    aircraft_separation: a_sep.text,
                                    emergency_fields: a_emerg.text,
                                    mlat_routes: a_mlats.text,
                                    hazards: a_haz.text,
                                    search_plan: {
                                        pattern: a_sp_pattern.text,
                                        visibility_nm: a_sp_vis.text,
                                        altitude_agl: a_sp_alt.text,
                                        speed_kts: a_sp_speed.text,
                                        track_spacing_nm: a_sp_track.text,
                                        terrain: a_sp_terrain.currentText,
                                        cover: a_sp_cover.currentText,
                                        turbulence: a_sp_turb.currentText,
                                        pod: a_sp_pod.text,
                                        time_to_search: a_sp_tts.text,
                                        time_started: a_sp_ts.text,
                                        time_ended: a_sp_te.text,
                                        time_in_area: a_sp_tisa.text,
                                        time_from_area: a_sp_tfsa.text,
                                        total_sortie_time: a_sp_total.text,
                                    }
                                }
                            }
                        }

                        RowLayout { Layout.fillWidth: true
                            Item { Layout.fillWidth: true }
                            C.Button { text: "Reset"; enabled: aDirty; onClicked: { aData = JSON.parse(JSON.stringify(aDataBaseline)); bindFromData(); aDirty=false } }
                            C.Button { text: "Save Assignment"; enabled: aDirty; onClicked: {
                                    var payload = collectData();
                                    dataApi.post(`/api/operations/taskings/${root.taskId}/assignment`, payload, function(resp){ aData = resp || payload; aDataBaseline = JSON.parse(JSON.stringify(aData)); aDirty=false })
                                }
                            }
                            C.Button { text: "Generate ICS 204 / CAPF 109 / SAR 104"; onClicked: {
                                    try {
                                        var res = taskingsBridge.exportForms(root.taskId, ["ICS 204", "CAPF 109", "SAR 104"])
                                        console.log("Exported forms:", JSON.stringify(res))
                                    } catch(e) { console.log("export error", e) }
                                }
                            }
                        }
                        C.TabBar { id: subTab; Layout.fillWidth: true
                            C.TabButton { text: "Ground Info" }
                            C.TabButton { text: "Air Info" }
                        }
                        StackLayout { Layout.fillWidth: true; Layout.fillHeight: true; currentIndex: subTab.currentIndex
                            // Ground Information
                            Flickable { contentWidth: width; contentHeight: gCol.implicitHeight; clip: true; boundsBehavior: Flickable.StopAtBounds
                                ColumnLayout { id: gCol; width: parent.width; spacing: 8
                                    C.Label { text: "Previous Search Efforts" }
                                    C.TextArea { id: g_prev; Layout.fillWidth: true; Layout.preferredHeight: 80; wrapMode: TextEdit.Wrap; onTextChanged: aDirty=true }
                                    C.Label { text: "Present Search Efforts" }
                                    C.TextArea { id: g_pres; Layout.fillWidth: true; Layout.preferredHeight: 80; wrapMode: TextEdit.Wrap; onTextChanged: aDirty=true }
                                    RowLayout { Layout.fillWidth: true; spacing: 12
                                        C.TextField { id: g_time; Layout.fillWidth: true; placeholderText: "Time Allocated"; onTextChanged: aDirty=true }
                                        C.TextField { id: g_size; Layout.fillWidth: true; placeholderText: "Size of Assignment"; onTextChanged: aDirty=true }
                                    }
                                    C.Label { text: "Expected POD" }
                                    RowLayout { Layout.fillWidth: true; spacing: 10
                                        C.ComboBox { id: g_pod_resp; Layout.preferredWidth: 160; model: ["High","Medium","Low"]; currentIndex: 1; editable: false; displayText: "Responsive Subj"; onActivated: aDirty=true }
                                        C.ComboBox { id: g_pod_unresp; Layout.preferredWidth: 160; model: ["High","Medium","Low"]; currentIndex: 1; editable: false; displayText: "Unresponsive Subj"; onActivated: aDirty=true }
                                        C.ComboBox { id: g_pod_clues; Layout.preferredWidth: 160; model: ["High","Medium","Low"]; currentIndex: 1; editable: false; displayText: "Clues"; onActivated: aDirty=true }
                                    }
                                    C.Label { text: "Drop-off Instructions" }
                                    C.TextArea { id: g_drop; Layout.fillWidth: true; Layout.preferredHeight: 60; wrapMode: TextEdit.Wrap; onTextChanged: aDirty=true }
                                    C.Label { text: "Pickup Instructions" }
                                    C.TextArea { id: g_pick; Layout.fillWidth: true; Layout.preferredHeight: 60; wrapMode: TextEdit.Wrap; onTextChanged: aDirty=true }
                                }
                            }
                            // Air Information
                            Flickable { contentWidth: width; contentHeight: aCol.implicitHeight; clip: true; boundsBehavior: Flickable.StopAtBounds
                                ColumnLayout { id: aCol; width: parent.width; spacing: 8
                                    RowLayout { Layout.fillWidth: true; spacing: 12
                                        C.TextField { id: a_aoo; Layout.fillWidth: true; placeholderText: "WMIRS Area of Operations" }
                                        C.TextField { id: a_dep; Layout.fillWidth: true; placeholderText: "Dep. Airport" }
                                        C.TextField { id: a_dest; Layout.fillWidth: true; placeholderText: "Dest. Airport" }
                                    }
                                    RowLayout { Layout.fillWidth: true; spacing: 12
                                        C.TextField { id: a_etd; Layout.fillWidth: true; placeholderText: "ETD (HH:MM[:SS])"; validator: QQ.RegExpValidator { regExp: /^(?:[01]\d|2[0-3]):[0-5]\d(?::[0-5]\d)?$/ }; onTextChanged: aDirty=true }
                                        C.TextField { id: a_ete; Layout.fillWidth: true; placeholderText: "ETE (HH:MM[:SS])"; validator: QQ.RegExpValidator { regExp: /^(?:[01]\d|2[0-3]):[0-5]\d(?::[0-5]\d)?$/ }; onTextChanged: aDirty=true }
                                    }
                                    C.TextArea { id: a_other_ac; Layout.fillWidth: true; Layout.preferredHeight: 60; placeholderText: "Other Aircraft in Area (Location & Callsign)"; wrapMode: TextEdit.Wrap; onTextChanged: aDirty=true }
                                    C.TextArea { id: a_gt_in_area; Layout.fillWidth: true; Layout.preferredHeight: 60; placeholderText: "Ground Teams in Area (Location & Callsign)"; wrapMode: TextEdit.Wrap; onTextChanged: aDirty=true }
                                    C.TextArea { id: a_obj; Layout.fillWidth: true; Layout.preferredHeight: 60; placeholderText: "Sortie Objectives"; wrapMode: TextEdit.Wrap; onTextChanged: aDirty=true }
                                    C.TextArea { id: a_deliv; Layout.fillWidth: true; Layout.preferredHeight: 60; placeholderText: "Sortie Deliverables"; wrapMode: TextEdit.Wrap; onTextChanged: aDirty=true }
                                    C.TextArea { id: a_actions; Layout.fillWidth: true; Layout.preferredHeight: 60; placeholderText: "Actions To Be Taken on Objectives & Deliverables"; wrapMode: TextEdit.Wrap; onTextChanged: aDirty=true }
                                    C.TextField { id: a_route; Layout.fillWidth: true; placeholderText: "Route of Flight"; onTextChanged: aDirty=true }
                                    RowLayout { Layout.fillWidth: true; spacing: 12
                                        C.TextField { id: a_alt; Layout.fillWidth: true; placeholderText: "Altitude Assignment & Restrictions"; onTextChanged: aDirty=true }
                                        C.TextField { id: a_speed; Layout.fillWidth: true; placeholderText: "Airspeed Expected & Restrictions"; validator: QQ.DoubleValidator { bottom: 0.0 }; onTextChanged: aDirty=true }
                                    }
                                    RowLayout { Layout.fillWidth: true; spacing: 12
                                        C.TextField { id: a_sep; Layout.fillWidth: true; placeholderText: "Aircraft Separation (Adjoining Areas)"; onTextChanged: aDirty=true }
                                        C.TextField { id: a_emerg; Layout.fillWidth: true; placeholderText: "Emergency/Alternate Fields"; onTextChanged: aDirty=true }
                                    }
                                    C.TextField { id: a_mlats; Layout.fillWidth: true; placeholderText: "Military Low Altitude Training Routes"; onTextChanged: aDirty=true }
                                    C.TextArea { id: a_haz; Layout.fillWidth: true; Layout.preferredHeight: 60; placeholderText: "Hazards to Flight"; wrapMode: TextEdit.Wrap; onTextChanged: aDirty=true }
                                    C.Label { text: "Sortie Search Plan"; font.bold: true }
                                    RowLayout { Layout.fillWidth: true; spacing: 10
                                        C.TextField { id: a_sp_pattern; Layout.fillWidth: true; placeholderText: "Search Pattern"; onTextChanged: aDirty=true }
                                        C.TextField { id: a_sp_vis; Layout.fillWidth: true; placeholderText: "Search Visibility (NM)"; validator: QQ.DoubleValidator { bottom: 0.0 }; onTextChanged: aDirty=true }
                                        C.TextField { id: a_sp_alt; Layout.fillWidth: true; placeholderText: "Search Altitude (AGL)"; validator: QQ.DoubleValidator { bottom: 0.0 }; onTextChanged: aDirty=true }
                                    }
                                    RowLayout { Layout.fillWidth: true; spacing: 10
                                        C.TextField { id: a_sp_speed; Layout.fillWidth: true; placeholderText: "Search Speed (Knots)"; validator: QQ.DoubleValidator { bottom: 0.0 }; onTextChanged: aDirty=true }
                                        C.TextField { id: a_sp_track; Layout.fillWidth: true; placeholderText: "Track Spacing (NM)"; validator: QQ.DoubleValidator { bottom: 0.0 }; onTextChanged: aDirty=true }
                                    }
                                    RowLayout { Layout.fillWidth: true; spacing: 10
                                        C.ComboBox { id: a_sp_terrain; Layout.preferredWidth: 200; model: ["Flat","Rolling Hills","Rugged Hills","Mountainous"]; onActivated: aDirty=true }
                                        C.ComboBox { id: a_sp_cover; Layout.preferredWidth: 200; model: ["Open","Moderate","Heavy","Light Snow","Heavy Snow"]; onActivated: aDirty=true }
                                        C.ComboBox { id: a_sp_turb; Layout.preferredWidth: 200; model: ["Light","Moderate","Heavy"]; onActivated: aDirty=true }
                                    }
                                    RowLayout { Layout.fillWidth: true; spacing: 10
                                        C.TextField { id: a_sp_pod; Layout.fillWidth: true; placeholderText: "Probability of Detection"; validator: QQ.DoubleValidator { bottom: 0.0; top: 100.0 }; onTextChanged: aDirty=true }
                                        C.TextField { id: a_sp_tts; Layout.fillWidth: true; placeholderText: "Time to Search Area"; validator: QQ.DoubleValidator { bottom: 0.0 }; onTextChanged: aDirty=true }
                                        C.TextField { id: a_sp_ts; Layout.fillWidth: true; placeholderText: "Time Started Search (HH:MM[:SS])"; validator: QQ.RegExpValidator { regExp: /^(?:[01]\d|2[0-3]):[0-5]\d(?::[0-5]\d)?$/ }; onTextChanged: aDirty=true }
                                    }
                                    RowLayout { Layout.fillWidth: true; spacing: 10
                                        C.TextField { id: a_sp_te; Layout.fillWidth: true; placeholderText: "Time Ended Search (HH:MM[:SS])"; validator: QQ.RegExpValidator { regExp: /^(?:[01]\d|2[0-3]):[0-5]\d(?::[0-5]\d)?$/ }; onTextChanged: aDirty=true }
                                        C.TextField { id: a_sp_tisa; Layout.fillWidth: true; placeholderText: "Time in Search Area"; validator: QQ.DoubleValidator { bottom: 0.0 }; onTextChanged: aDirty=true }
                                        C.TextField { id: a_sp_tfsa; Layout.fillWidth: true; placeholderText: "Time From Search Area"; validator: QQ.DoubleValidator { bottom: 0.0 }; onTextChanged: aDirty=true }
                                    }
                                    C.TextField { id: a_sp_total; Layout.fillWidth: true; placeholderText: "Total Sortie Time"; validator: QQ.DoubleValidator { bottom: 0.0 }; onTextChanged: aDirty=true }
                                }
                            }
                        }
                        Component.onCompleted: loadAssignment()
                } }

                // 6. Communications
                Item { Layout.fillWidth: true; Layout.fillHeight: true
                    property var commRows: []
                    property var commChannels: []
                    function refreshComms(){
                        try {
                            var ch = taskingsBridge.listCommsChannels(); commChannels = (ch && ch.channels) ? ch.channels : []
                            var r = taskingsBridge.listTaskComms(root.taskId); commRows = (r && r.rows) ? r.rows : []
                        } catch(e) { commChannels = []; commRows = [] }
                    }
                    Component.onCompleted: refreshComms()
                    RowLayout { Layout.fillWidth: true
                        C.Button { text: "Add Row"; onClicked: { var resp = taskingsBridge.addTaskComm(root.taskId, {}); if (resp && resp.rows) commRows = resp.rows } }
                        Item { Layout.fillWidth: true }
                    }
                    C.ScrollView { Layout.fillWidth: true; Layout.fillHeight: true
                        ListView {
                            id: commList
                            anchors.fill: parent
                            model: commRows
                            clip: true
                            header: Rectangle { height: 32; width: parent.width; color: "#000"
                                Row { anchors.fill: parent; anchors.margins: 6; spacing: 8
                                    C.Label { text: "Channel Name"; color: "#fff"; width: 220 }
                                    C.Label { text: "Zone"; color: "#fff"; width: 140 }
                                    C.Label { text: "Channel #"; color: "#fff"; width: 90 }
                                    C.Label { text: "Function"; color: "#fff"; width: 160 }
                                    C.Label { text: "RX Freq"; color: "#fff"; width: 120 }
                                    C.Label { text: "RX Tone/NAC"; color: "#fff"; width: 120 }
                                    C.Label { text: "TX Freq"; color: "#fff"; width: 120 }
                                    C.Label { text: "TX Tone/NAC"; color: "#fff"; width: 120 }
                                    C.Label { text: "Mode"; color: "#fff"; width: 80 }
                                    C.Label { text: "Remarks"; color: "#fff"; width: 200 }
                                    Item { Layout.fillWidth: true }
                                }
                            }
                            delegate: Rectangle {
                                width: commList.width; height: 40
                                color: (index % 2 ? "#fafafa" : "#ffffff"); border.color: "#ddd"
                                Row { anchors.fill: parent; anchors.margins: 6; spacing: 8
                                    // Channel Name dropdown (incident channels)
                                    C.ComboBox {
                                        id: chName
                                        width: 220
                                        model: (commChannels || []).map(function(c){ return { id: c.id, label: c.channel } })
                                        textRole: "label"
                                        onActivated: function(i){ try { var sel = model[i]; if (!sel) return; taskingsBridge.updateTaskComm(model.id, { incident_channel_id: sel.id }); var r = taskingsBridge.listTaskComms(root.taskId); if (r && r.rows) commRows = r.rows } catch(e){} }
                                        Component.onCompleted: {
                                            try {
                                                var idx = -1; for (var k=0;k<model.length;k++){ if (model[k].id === commRows[index].incident_channel_id) { idx = k; break } }
                                                if (idx >= 0) currentIndex = idx
                                            } catch(e){}
                                        }
                                    }
                                    // Zone (system)
                                    C.Label { text: (model.zone||""); width: 140 }
                                    // Channel Number (sort_index)
                                    C.Label { text: (model.channel_number||""); width: 90 }
                                    // Function dropdown
                                    C.ComboBox {
                                        width: 160
                                        model: root.lookups.radio_functions || []
                                        currentIndex: {
                                            var f = String(model.function||"").toUpperCase(); var m = root.lookups.radio_functions||[]; for (var i=0;i<m.length;i++){ if (String(m[i]).toUpperCase()===f) return i } return -1
                                        }
                                        onActivated: function(i){ try { var val = (typeof textAt==='function') ? textAt(i) : (currentText||""); taskingsBridge.updateTaskComm(model.id, { function: val }); } catch(e){} }
                                    }
                                    // RX/TX details (read-only)
                                    C.Label { text: (model.rx_frequency||""); width: 120 }
                                    C.Label { text: (model.rx_tone||""); width: 120 }
                                    C.Label { text: (model.tx_frequency||""); width: 120 }
                                    C.Label { text: (model.tx_tone||""); width: 120 }
                                    C.Label { text: (model.mode||""); width: 80 }
                                    C.Label { text: (model.remarks||""); width: 200 }
                                    C.ToolButton { text: "✖"; onClicked: { if (taskingsBridge.removeTaskComm(model.id)) { commRows.splice(index,1) } } }
                                }
                            }
                        }
                    }
                }

                // 7. Debriefing
                Item { ColumnLayout { anchors.fill: parent; spacing: 8
                        property var debriefRows: []
                        property int selectedDebriefId: -1
                        function refreshDebriefs(){ try { var r = taskingsBridge.listDebriefs(root.taskId); debriefRows = (r && r.rows) ? r.rows : [] } catch(e){ debriefRows=[] } }
                        Component.onCompleted: refreshDebriefs()

                        RowLayout { Layout.fillWidth: true
                            C.Button { text: "Add Debrief"; onClicked: newDebriefDlg.open() }
                            Item { Layout.fillWidth: true }
                        }
                        // Debrief list
                        C.ScrollView { Layout.fillWidth: true; Layout.preferredHeight: 180
                            ListView {
                                id: debriefList
                                anchors.fill: parent
                                model: debriefRows
                                clip: true
                                header: Rectangle { height: 28; color: "#000"; width: parent.width
                                    Row { anchors.fill: parent; anchors.margins: 6; spacing: 8
                                        C.Label { text: "!"; color: "#fff"; width: 24 }
                                        C.Label { text: "ID"; color: "#fff"; width: 60 }
                                        C.Label { text: "Sortie"; color: "#fff"; width: 120 }
                                        C.Label { text: "Debriefer"; color: "#fff"; width: 140 }
                                        C.Label { text: "Types"; color: "#fff"; width: 320 }
                                        C.Label { text: "Status"; color: "#fff"; width: 120 }
                                        C.Label { text: "Submitted"; color: "#fff"; width: 180 }
                                        C.Label { text: "Reviewed"; color: "#fff"; width: 180 }
                                        C.Label { text: "Updated"; color: "#fff"; width: 160 }
                                        Item { Layout.fillWidth: true }
                                    }
                                }
                                delegate: Rectangle {
                                    width: debriefList.width; height: 32
                                    color: index % 2 ? "#fafafa" : "#ffffff"; border.color: "#ddd"
                                    Row { anchors.fill: parent; anchors.margins: 6; spacing: 8
                                        Rectangle { width: 24; height: 20; radius: 10; color: (model.flagged_for_review? "#d32f2f" : "transparent") }
                                        C.Label { text: String(model.id||""); width: 60 }
                                        C.Label { text: (model.sortie_number||""); width: 120 }
                                        C.Label { text: (model.debriefer_id||""); width: 140 }
                                        C.Label { text: (Array.isArray(model.types)? model.types.join(", ") : String(model.types||"")); width: 320 }
                                        C.Label { text: (model.status||"Draft"); width: 120 }
                                        C.Label { text: (model.submitted_by? (String(model.submitted_by)+" @ "+String(model.submitted_at||"")) : ""); width: 180 }
                                        C.Label { text: (model.reviewed_by? (String(model.reviewed_by)+" @ "+String(model.reviewed_at||"")) : ""); width: 180 }
                                        C.Label { text: (model.updated_at||""); width: 160 }
                                        C.Button { text: "Open"; onClicked: { selectedDebriefId = model.id; debriefEditor.load(model.id) } }
                                        C.Button { text: "Submit"; enabled: (String(model.status||"Draft").toLowerCase()==='draft'); onClicked: {
                                                try { var d = taskingsBridge.submitDebrief(model.id); refreshDebriefs(); } catch(e){}
                                            }
                                        }
                                        C.Button { text: "Mark Reviewed"; enabled: (String(model.status||"").toLowerCase()==='submitted'); onClicked: {
                                                try { var d2 = taskingsBridge.markDebriefReviewed(model.id); refreshDebriefs(); } catch(e){}
                                            }
                                        }
                                        C.Button { text: "Archive"; enabled: (String(model.status||"").toLowerCase()!=='archived'); onClicked: { try { taskingsBridge.archiveDebrief(model.id); refreshDebriefs() } catch(e){} } }
                                        C.Button { text: "Delete"; onClicked: { if (Qt.platform.os) { /* noop */ } var ok = true; /* add confirm if desired */ if (ok) { try { var r = taskingsBridge.deleteDebrief(root.taskId, model.id); if (r && r.rows) debriefRows = r.rows } catch(e){} } } }
                                    }
                                }
                            }
                        }

                        // Editor shows when a debrief is selected
                        Rectangle { Layout.fillWidth: true; Layout.fillHeight: true; color: "transparent"; border.color: "#e0e0e0"; radius: 4
                            ColumnLayout { anchors.fill: parent; anchors.margins: 8; spacing: 6
                                C.Label { text: selectedDebriefId>0 ? ("Editing Debrief #"+selectedDebriefId) : "No debrief selected"; font.bold: true }
                                Loader { id: debriefEditor
                                    function load(id){ if (!id) { sourceComponent = undefined; return } sourceComponent = debEditorCmp; }
                                }
                            }
                        }

                        // Dialog to create new debrief
                        C.Dialog {
                            id: newDebriefDlg
                            title: "New Debrief"
                            standardButtons: C.Dialog.Ok | C.Dialog.Cancel
                            modal: true
                            property bool okEnabled: (types_ground.checked || types_air.checked) && (ed_sortie.text.length>0)
                            onAccepted: {
                                var types = []
                                if (types_ground.checked) types.push("Ground (SAR)")
                                if (types_area.checked) types.push("Area Search Supplement")
                                if (types_track.checked) types.push("Tracking Team Supplement")
                                if (types_hasty.checked) types.push("Hasty Search Supplement")
                                if (types_air.checked) types.push("Air (General)")
                                if (types_air_sar.checked) types.push("Air (SAR Worksheet)")
                                var resp = taskingsBridge.createDebrief(root.taskId, { sortie_number: ed_sortie.text, debriefer_id: ed_debriefer.text, types: types })
                                if (resp && resp.rows) { debriefRows = resp.rows }
                                // Auto-open newest
                                if (resp && resp.created_id) { selectedDebriefId = resp.created_id; debriefEditor.load(resp.created_id) }
                            }
                            contentItem: ColumnLayout {
                                spacing: 8
                                C.TextField { id: ed_sortie; Layout.fillWidth: true; placeholderText: "Sortie Number" }
                                C.TextField { id: ed_debriefer; Layout.fillWidth: true; placeholderText: "Debriefer ID" }
                                C.Label { text: "Select Debrief Forms"; font.bold: true }
                                RowLayout {
                                    ColumnLayout {
                                        C.CheckBox { id: types_ground; text: "Ground (SAR)"; checked: true }
                                        C.CheckBox { id: types_area; text: "Area Search Supplement"; enabled: types_ground.checked }
                                        C.CheckBox { id: types_track; text: "Tracking Team Supplement"; enabled: types_ground.checked }
                                        C.CheckBox { id: types_hasty; text: "Hasty Search Supplement"; enabled: types_ground.checked }
                                    }
                                    ColumnLayout {
                                        C.CheckBox { id: types_air; text: "Air (General)" }
                                        C.CheckBox { id: types_air_sar; text: "Air (SAR Worksheet)"; enabled: types_air.checked }
                                    }
                                }
                            }
                        }
                } }

                // Debrief editor component (tabs driven by loaded types)
                Component { id: debEditorCmp
                    Item {
                        property var deb: ({})
                        function loadData(){ if (selectedDebriefId>0) { var d = taskingsBridge.getDebrief(selectedDebriefId); deb = d || {}; bindFromDebrief() } }
                        function hasType(t){ try { var arr = deb.types || []; for (var i=0;i<arr.length;i++) if (String(arr[i]).toLowerCase()===String(t).toLowerCase()) return true } catch(e){} return false }
                        function bindFromDebrief(){
                            // Ground (SAR)
                            try { var g = deb.forms && deb.forms.ground_sar ? deb.forms.ground_sar : {}; g_sum.text = g.assignment_summary||""; g_desc.text = g.describe_efforts||""; g_unsearched.text = g.describe_unsearched||""; g_clues.text = g.describe_clues||""; g_haz.text = g.describe_hazards||""; g_sugg.text = g.suggestions||""; g_tin.text = g.time_in||""; g_tout.text = g.time_out||""; g_tspent.text = g.time_spent||""; g_clouds.currentIndex = idxOf(["Clear","Scattered","Broken","Overcast"], g.clouds); g_prec.currentIndex = idxOf(["None","Rain","Scattered","Snow"], g.precipitation); g_light.currentIndex = idxOf(["Bright","Dull","Near Dark","Night"], g.light); g_vis.currentIndex = idxOf(["> 10 Miles","> 5 Miles","> 1 Mile","< 1 Mile"], g.visibility); g_terrain.currentIndex = idxOf(["Flat","Rolling Hills","Rugged Hills","Mtns"], g.terrain); g_cover.currentIndex = idxOf(["Open","Moderate","Heavy","Other"], g.ground_cover); g_wind.currentIndex = idxOf(["Calm","< 10 mph","< 20 mph","< 30 mph"], g.wind); } catch(e){}
                            // Air (General)
                            try { var a = deb.forms && deb.forms.air_general ? deb.forms.air_general : {}; a_fpc.checked = !!a.flight_plan_closed; a_atd.text = a.atd||""; a_ata.text = a.ata||""; a_hs.text = a.hobbs_start||""; a_he.text = a.hobbs_end||""; a_htf.text = a.hobbs_to_from||""; a_hia.text = a.hobbs_in_area||""; a_ht.text = a.hobbs_total||""; a_ts.text = a.tach_start||""; a_te.text = a.tach_end||""; a_fu.text = a.fuel_used||""; a_ou.text = a.oil_used||""; a_cost.text = a.cost||""; a_rcpt.text = a.receipt||""; a_sum.text = a.summary||""; a_results.text = a.results||""; a_weather.text = a.weather||""; a_remarks.text = a.remarks||""; a_eff.currentIndex = idxOf(["Successful","Marginal","Unsuccessful","Not Flown","Not Required"], a.effectiveness); a_reason.currentIndex = idxOf(["Weather","Crew Unavailable","Aircraft Maintenance","Customer Cancellation","Equipment Failure","Other"], a.reason); } catch(e){}
                        }
                        function idxOf(arr, val){ try{ var v=String(val||"").toLowerCase(); for (var i=0;i<arr.length;i++) if (String(arr[i]).toLowerCase()===v) return i }catch(e){} return -1 }
                        ColumnLayout { anchors.fill: parent; spacing: 6
                            C.TabBar { id: debTabs; Layout.fillWidth: true
                                C.TabButton { visible: hasType('Ground (SAR)'); text: "Ground (SAR)" }
                                C.TabButton { visible: hasType('Area Search Supplement'); text: "Area Search" }
                                C.TabButton { visible: hasType('Tracking Team Supplement'); text: "Tracking" }
                                C.TabButton { visible: hasType('Hasty Search Supplement'); text: "Hasty" }
                                C.TabButton { visible: hasType('Air (General)'); text: "Air (General)" }
                                C.TabButton { visible: hasType('Air (SAR Worksheet)'); text: "Air (SAR)" }
                            }
                            RowLayout { Layout.fillWidth: true
                                Item { Layout.fillWidth: true }
                                C.Button { text: "Submit for Review"; enabled: (String((deb && deb.status)||'Draft').toLowerCase()==='draft'); onClicked: { try { var d = taskingsBridge.submitDebrief(selectedDebriefId); deb = d || deb; refreshDebriefs() } catch(e){} } }
                                C.Button { text: "Mark Reviewed"; enabled: (String((deb && deb.status)||'').toLowerCase()==='submitted'); onClicked: { try { var d2 = taskingsBridge.markDebriefReviewed(selectedDebriefId); deb = d2 || deb; refreshDebriefs() } catch(e){} } }
                            }
                            StackLayout { Layout.fillWidth: true; Layout.fillHeight: true; currentIndex: debTabs.currentIndex
                                // Ground (SAR)
                                Flickable { visible: hasType('Ground (SAR)'); contentWidth: width; contentHeight: groundCol.implicitHeight; clip: true
                                    ColumnLayout { id: groundCol; width: parent.width; spacing: 6
                                        C.TextArea { id: g_sum; Layout.fillWidth: true; Layout.preferredHeight: 60; placeholderText: "Assignment Summary" }
                                        C.TextArea { id: g_desc; Layout.fillWidth: true; Layout.preferredHeight: 60; placeholderText: "Describe Search Efforts in Assignment" }
                                        C.TextArea { id: g_unsearched; Layout.fillWidth: true; Layout.preferredHeight: 60; placeholderText: "Describe Portions Unable to Search" }
                                        C.TextArea { id: g_clues; Layout.fillWidth: true; Layout.preferredHeight: 60; placeholderText: "Describe Clues/Tracks/Signs or any Interviews" }
                                        C.TextArea { id: g_haz; Layout.fillWidth: true; Layout.preferredHeight: 60; placeholderText: "Describe any Hazards or Problems Encountered" }
                                        C.TextArea { id: g_sugg; Layout.fillWidth: true; Layout.preferredHeight: 60; placeholderText: "Suggestions for Further Search Efforts In or Near Assignment" }
                                        RowLayout { Layout.fillWidth: true; spacing: 10
                                            C.TextField { id: g_tin; Layout.fillWidth: true; placeholderText: "Time Entered (HH:MM)" }
                                            C.TextField { id: g_tout; Layout.fillWidth: true; placeholderText: "Time Exited (HH:MM)" }
                                            C.TextField { id: g_tspent; Layout.fillWidth: true; placeholderText: "Time Spent (auto)" }
                                        }
                                        RowLayout { Layout.fillWidth: true; spacing: 10
                                            C.ComboBox { id: g_clouds; Layout.preferredWidth: 160; model: ["Clear","Scattered","Broken","Overcast"] }
                                            C.ComboBox { id: g_prec; Layout.preferredWidth: 160; model: ["None","Rain","Scattered","Snow"] }
                                            C.ComboBox { id: g_light; Layout.preferredWidth: 160; model: ["Bright","Dull","Near Dark","Night"] }
                                            C.ComboBox { id: g_vis; Layout.preferredWidth: 180; model: ["> 10 Miles","> 5 Miles","> 1 Mile","< 1 Mile"] }
                                            C.ComboBox { id: g_terrain; Layout.preferredWidth: 160; model: ["Flat","Rolling Hills","Rugged Hills","Mtns"] }
                                            C.ComboBox { id: g_cover; Layout.preferredWidth: 160; model: ["Open","Moderate","Heavy","Other"] }
                                            C.ComboBox { id: g_wind; Layout.preferredWidth: 160; model: ["Calm","< 10 mph","< 20 mph","< 30 mph"] }
                                        }
                                        RowLayout { Layout.fillWidth: true
                                            Item { Layout.fillWidth: true }
                                            C.Button { text: "Save"; onClicked: { var data = { assignment_summary: g_sum.text, describe_efforts: g_desc.text, describe_unsearched: g_unsearched.text, describe_clues: g_clues.text, describe_hazards: g_haz.text, suggestions: g_sugg.text, time_in: g_tin.text, time_out: g_tout.text, time_spent: g_tspent.text, clouds: g_clouds.currentText, precipitation: g_prec.currentText, light: g_light.currentText, visibility: g_vis.currentText, terrain: g_terrain.currentText, ground_cover: g_cover.currentText, wind: g_wind.currentText }; taskingsBridge.saveDebriefForm(selectedDebriefId, 'ground_sar', data) } }
                                        }
                                    }
                                }
                                // Area Search Supplement (skeleton)
                                Item { visible: hasType('Area Search Supplement'); ColumnLayout { anchors.fill: parent; anchors.margins: 6; spacing: 6
                                        C.Label { text: "Area Search Supplement"; font.bold: true }
                                        C.TextField { id: as_num; Layout.fillWidth: true; placeholderText: "Number of Searchers" }
                                        C.TextField { id: as_time; Layout.fillWidth: true; placeholderText: "Time Spent Searching" }
                                        C.TextField { id: as_speed; Layout.fillWidth: true; placeholderText: "Search Speed" }
                                        C.TextField { id: as_size; Layout.fillWidth: true; placeholderText: "Area Size (Actually Searched)" }
                                        C.TextField { id: as_spacing; Layout.fillWidth: true; placeholderText: "Spacing" }
                                        C.TextArea { id: as_vis; Layout.fillWidth: true; Layout.preferredHeight: 60; placeholderText: "Visibility Distance" }
                                        C.TextArea { id: as_vis_det; Layout.fillWidth: true; Layout.preferredHeight: 60; placeholderText: "How was Visibility Distance Determined" }
                                        C.TextArea { id: as_skip; Layout.fillWidth: true; Layout.preferredHeight: 60; placeholderText: "Types of Areas Skipped Over" }
                                        C.TextArea { id: as_dir; Layout.fillWidth: true; Layout.preferredHeight: 60; placeholderText: "Describe the Direction and Pattern of your Search" }
                                        C.TextArea { id: as_cmt; Layout.fillWidth: true; Layout.preferredHeight: 60; placeholderText: "Comments for Additional Area Searching" }
                                        RowLayout { Layout.fillWidth: true; Item { Layout.fillWidth: true }
                                            C.Button { text: "Save"; onClicked: { var data = { num_searchers: as_num.text, time_spent: as_time.text, search_speed: as_speed.text, area_size: as_size.text, spacing: as_spacing.text, visibility: as_vis.text, visibility_determined: as_vis_det.text, areas_skipped: as_skip.text, direction_pattern: as_dir.text, comments: as_cmt.text }; taskingsBridge.saveDebriefForm(selectedDebriefId, 'area_search', data) } }
                                        }
                                } }
                                // Tracking Team Supplement (skeleton)
                                Item { visible: hasType('Tracking Team Supplement'); ColumnLayout { anchors.fill: parent; anchors.margins: 6; spacing: 6
                                        C.Label { text: "Tracking Team Supplement"; font.bold: true }
                                        C.TextArea { id: tr_likely; Layout.fillWidth: true; Layout.preferredHeight: 60; placeholderText: "Likelihood of finding tracks/sign on trails" }
                                        C.TextArea { id: tr_traps_loc; Layout.fillWidth: true; Layout.preferredHeight: 60; placeholderText: "Location and nature of existing track traps" }
                                        C.TextArea { id: tr_erase; Layout.fillWidth: true; Layout.preferredHeight: 60; placeholderText: "Did you erase any track traps" }
                                        C.TextArea { id: tr_create; Layout.fillWidth: true; Layout.preferredHeight: 60; placeholderText: "Did you create any new track traps" }
                                        C.TextArea { id: tr_route; Layout.fillWidth: true; Layout.preferredHeight: 60; placeholderText: "Route taken by any tracks followed" }
                                        C.TextArea { id: tr_stop; Layout.fillWidth: true; Layout.preferredHeight: 60; placeholderText: "Why did you discontinue following these tracks" }
                                        RowLayout { Layout.fillWidth: true; Item { Layout.fillWidth: true }
                                            C.Button { text: "Save"; onClicked: { var data = { likely_tracks: tr_likely.text, traps_location: tr_traps_loc.text, erased: tr_erase.text, created: tr_create.text, route_taken: tr_route.text, why_stop: tr_stop.text }; taskingsBridge.saveDebriefForm(selectedDebriefId, 'tracking', data) } }
                                        }
                                } }
                                // Hasty Search Supplement (skeleton)
                                Item { visible: hasType('Hasty Search Supplement'); ColumnLayout { anchors.fill: parent; anchors.margins: 6; spacing: 6
                                        C.Label { text: "Hasty Search Supplement"; font.bold: true }
                                        C.TextArea { id: hs_vis; Layout.fillWidth: true; Layout.preferredHeight: 60; placeholderText: "Visibility During Search" }
                                        C.TextArea { id: hs_attract; Layout.fillWidth: true; Layout.preferredHeight: 60; placeholderText: "Efforts to attract a responsive subject" }
                                        C.TextArea { id: hs_hear; Layout.fillWidth: true; Layout.preferredHeight: 60; placeholderText: "Ability to hear a response (background noise)" }
                                        C.TextArea { id: hs_trail; Layout.fillWidth: true; Layout.preferredHeight: 60; placeholderText: "Trail conditions" }
                                        C.TextArea { id: hs_offtrail; Layout.fillWidth: true; Layout.preferredHeight: 60; placeholderText: "Off-trail conditions" }
                                        C.TextArea { id: hs_map; Layout.fillWidth: true; Layout.preferredHeight: 60; placeholderText: "Does the map accurately reflect the trails" }
                                        C.TextArea { id: hs_features; Layout.fillWidth: true; Layout.preferredHeight: 60; placeholderText: "Likely features located" }
                                        C.TextArea { id: hs_trackcond; Layout.fillWidth: true; Layout.preferredHeight: 60; placeholderText: "How are the tracking conditions" }
                                        C.TextArea { id: hs_haz; Layout.fillWidth: true; Layout.preferredHeight: 60; placeholderText: "Hazards or attractions found" }
                                        RowLayout { Layout.fillWidth: true; Item { Layout.fillWidth: true }
                                            C.Button { text: "Save"; onClicked: { var data = { visibility: hs_vis.text, attract: hs_attract.text, hear: hs_hear.text, trail: hs_trail.text, off_trail: hs_offtrail.text, map: hs_map.text, features: hs_features.text, track_conditions: hs_trackcond.text, hazards: hs_haz.text }; taskingsBridge.saveDebriefForm(selectedDebriefId, 'hasty', data) } }
                                        }
                                } }
                                // Air (General)
                                Flickable { visible: hasType('Air (General)'); contentWidth: width; contentHeight: airCol.implicitHeight; clip: true
                                    ColumnLayout { id: airCol; width: parent.width; spacing: 6
                                        RowLayout { Layout.fillWidth: true; spacing: 10
                                            C.CheckBox { id: a_fpc; text: "Flight Plan Closed" }
                                            C.TextField { id: a_atd; Layout.fillWidth: true; placeholderText: "ATD" }
                                            C.TextField { id: a_ata; Layout.fillWidth: true; placeholderText: "ATA" }
                                        }
                                        RowLayout { Layout.fillWidth: true; spacing: 10
                                            C.TextField { id: a_hs; Layout.fillWidth: true; placeholderText: "Hobbs Start" }
                                            C.TextField { id: a_he; Layout.fillWidth: true; placeholderText: "Hobbs End" }
                                            C.TextField { id: a_htf; Layout.fillWidth: true; placeholderText: "Hobbs To/From" }
                                            C.TextField { id: a_hia; Layout.fillWidth: true; placeholderText: "Hobbs in Area" }
                                            C.TextField { id: a_ht; Layout.fillWidth: true; placeholderText: "Hobbs Total" }
                                        }
                                        RowLayout { Layout.fillWidth: true; spacing: 10
                                            C.TextField { id: a_ts; Layout.fillWidth: true; placeholderText: "Tach Start" }
                                            C.TextField { id: a_te; Layout.fillWidth: true; placeholderText: "Tach End" }
                                            C.TextField { id: a_fu; Layout.fillWidth: true; placeholderText: "Fuel Used (Gal)" }
                                            C.TextField { id: a_ou; Layout.fillWidth: true; placeholderText: "Oil Used (Qt)" }
                                        }
                                        RowLayout { Layout.fillWidth: true; spacing: 10
                                            C.TextField { id: a_cost; Layout.fillWidth: true; placeholderText: "Fuel & Oil Cost" }
                                            C.TextField { id: a_rcpt; Layout.fillWidth: true; placeholderText: "Receipt #" }
                                        }
                                        C.TextArea { id: a_summary; Layout.fillWidth: true; Layout.preferredHeight: 60; placeholderText: "Summary" }
                                        C.TextArea { id: a_results; Layout.fillWidth: true; Layout.preferredHeight: 60; placeholderText: "Results/Deliverables" }
                                        C.TextArea { id: a_weather; Layout.fillWidth: true; Layout.preferredHeight: 60; placeholderText: "Weather Conditions" }
                                        C.TextArea { id: a_remarks; Layout.fillWidth: true; Layout.preferredHeight: 60; placeholderText: "Remarks" }
                                        RowLayout { Layout.fillWidth: true; spacing: 10
                                            C.ComboBox { id: a_eff; Layout.preferredWidth: 220; model: ["Successful","Marginal","Unsuccessful","Not Flown","Not Required"] }
                                            C.ComboBox { id: a_reason; Layout.preferredWidth: 320; model: ["Weather","Crew Unavailable","Aircraft Maintenance","Customer Cancellation","Equipment Failure","Other"] }
                                        }
                                        RowLayout { Layout.fillWidth: true; Item { Layout.fillWidth: true }
                                            C.Button { text: "Save"; onClicked: { var data = { flight_plan_closed: a_fpc.checked, atd: a_atd.text, ata: a_ata.text, hobbs_start: a_hs.text, hobbs_end: a_he.text, hobbs_to_from: a_htf.text, hobbs_in_area: a_hia.text, hobbs_total: a_ht.text, tach_start: a_ts.text, tach_end: a_te.text, fuel_used: a_fu.text, oil_used: a_ou.text, cost: a_cost.text, receipt: a_rcpt.text, summary: a_summary.text, results: a_results.text, weather: a_weather.text, remarks: a_remarks.text, effectiveness: a_eff.currentText, reason: a_reason.currentText }; taskingsBridge.saveDebriefForm(selectedDebriefId, 'air_general', data) } }
                                        }
                                    }
                                }
                                // Air (SAR Worksheet) (skeleton)
                                Item { visible: hasType('Air (SAR Worksheet)'); ColumnLayout { anchors.fill: parent; anchors.margins: 6; spacing: 6
                                        C.Label { text: "Air (SAR Worksheet)"; font.bold: true }
                                        C.TextField { id: asar_area; Layout.fillWidth: true; placeholderText: "Search Area Name/Grid" }
                                        C.TextArea { id: asar_plan; Layout.fillWidth: true; Layout.preferredHeight: 60; placeholderText: "Search Plan Summary" }
                                        RowLayout { Layout.fillWidth: true; Item { Layout.fillWidth: true }
                                            C.Button { text: "Save"; onClicked: { var data = { area: asar_area.text, plan: asar_plan.text }; taskingsBridge.saveDebriefForm(selectedDebriefId, 'air_sar', data) } }
                                        }
                                } }
                            }
                            Component.onCompleted: loadData()
                        }
                    }
                }

                // 8. Log
                Item { Layout.fillWidth: true; Layout.fillHeight: true
                    property var auditRows: []
                    property string fSearch: ""
                    property string fField: ""
                    property string fFrom: ""
                    property string fTo: ""
                    function refreshAudit(){ try { var f = { search: fSearch, field: fField, from: fFrom, to: fTo, limit: 1000 }; var r = taskingsBridge.listAudit(root.taskId, f); auditRows = (r && r.rows) ? r.rows : [] } catch(e){ auditRows=[] } }
                    Component.onCompleted: refreshAudit()
                    ColumnLayout { anchors.fill: parent; spacing: 6
                        // Filters
                        RowLayout { Layout.fillWidth: true; spacing: 8
                            C.TextField { Layout.preferredWidth: 240; placeholderText: "Keyword search"; text: fSearch; onEditingFinished: { fSearch = text; refreshAudit() } }
                            C.TextField { Layout.preferredWidth: 180; placeholderText: "Field filter"; text: fField; onEditingFinished: { fField = text; refreshAudit() } }
                            C.TextField { Layout.preferredWidth: 160; placeholderText: "From (YYYY-MM-DD)"; text: fFrom; onEditingFinished: { fFrom = text; refreshAudit() } }
                            C.TextField { Layout.preferredWidth: 160; placeholderText: "To (YYYY-MM-DD)"; text: fTo; onEditingFinished: { fTo = text; refreshAudit() } }
                            Item { Layout.fillWidth: true }
                            C.Button { text: "Refresh"; onClicked: refreshAudit() }
                            C.Button { text: "Export CSV"; onClicked: { try { var p = taskingsBridge.exportAudit(root.taskId, { search: fSearch, field: fField, from: fFrom, to: fTo }); console.log('Exported audit to', p) } catch(e){} } }
                        }
                        // Table
                        C.ScrollView { Layout.fillWidth: true; Layout.fillHeight: true
                            ListView {
                                id: auditList
                                anchors.fill: parent
                                model: auditRows
                                clip: true
                                header: Rectangle { height: 28; color: "#000"; width: parent.width
                                    Row { anchors.fill: parent; anchors.margins: 6; spacing: 8
                                        C.Label { text: "Timestamp"; color: "#fff"; width: 180 }
                                        C.Label { text: "Field Changed"; color: "#fff"; width: 200 }
                                        C.Label { text: "Old Value"; color: "#fff"; width: 220 }
                                        C.Label { text: "New Value"; color: "#fff"; width: 220 }
                                        C.Label { text: "Changed By"; color: "#fff"; width: 200 }
                                        Item { Layout.fillWidth: true }
                                    }
                                }
                                delegate: Rectangle {
                                    width: auditList.width; height: 32
                                    color: index % 2 ? "#fafafa" : "#ffffff"; border.color: "#ddd"
                                    Row { anchors.fill: parent; anchors.margins: 6; spacing: 8
                                        C.Label { text: (model.ts_utc || model.timestamp || ""); width: 180 }
                                        C.Label { text: (model.field_changed || model.action || ""); width: 200 }
                                        C.Label { text: (model.old_value || ""); width: 220 }
                                        C.Label { text: (model.new_value || ""); width: 220 }
                                        C.Label { text: (model.changed_by_display || model.user_id || ""); width: 200 }
                                    }
                                }
                            }
                        }
                    }
                }

                // 9. Attachments/Forms
                Item { C.Label { anchors.centerIn: parent; text: "Attachments table placeholder" } }

                // 10. Planning
                Item { C.Label { anchors.centerIn: parent; text: "Strategic linkages placeholder" } }
            }
        }
    }

    // --- Actions ---
    function submitNarrative() {
        if (!narrativeEntry.text || !taskId || taskId < 1) return;
        var payload = { timestamp: new Date().toISOString(), entry_text: narrativeEntry.text, entered_by: "", team_name: "", critical_flag: (narCritical.currentIndex === 1) };
        dataApi.post(`/api/operations/taskings/${taskId}/narrative`, payload, function(saved){
            // Append to model optimistically
            var obj = saved || payload
            narrativeModel.append(obj)
            narrativeEntry.text = ""
            narCritical.currentIndex = 0
            // scroll to bottom
            if (narrativeList && narrativeList.count>0) narrativeList.positionViewAtEnd()
        });
    }

    // Trigger data load when taskId is set or when the window becomes visible
    onTaskIdChanged: {
        if (root.taskId && root.taskId > 0) {
            lookupsLoader.load();
            taskLoader.load(root.taskId);
            teamsLoader.load(root.taskId);
            narrativeLoader.load(root.taskId);
            personnelLoader.load(root.taskId);
            vehiclesLoader.load(root.taskId);
        }
    }

    onVisibleChanged: {
        if (visible && root.taskId && root.taskId > 0) {
            // Refresh on show in case data changed while hidden
            taskLoader.load(root.taskId);
            teamsLoader.load(root.taskId);
            narrativeLoader.load(root.taskId);
            personnelLoader.load(root.taskId);
            vehiclesLoader.load(root.taskId);
        }
    }

    // --- Helpers to sync UI from loaded task detail ---
    function _indexOfInsensitive(arr, value) {
        try {
            var v = (value||"").toString().toLowerCase();
            for (var i=0;i<arr.length;i++) if ((arr[i]||"").toString().toLowerCase()===v) return i;
        } catch(e) {}
        return -1;
    }
    function syncHeaderFromTask() {
        try {
            var t = (taskDetail && taskDetail.task) ? taskDetail.task : null;
            if (!t) return;
            taskIdField.text = t.task_id || "";
            var ci = _indexOfInsensitive(root.lookups.categories||[], t.category||""); if (ci >= 0) categoryBox.currentIndex = ci;
            // set type list and selection when detail is loaded
            try {
                var types = (root.lookups && root.lookups.task_types_by_category) ? root.lookups.task_types_by_category[t.category] : []
                typeBox.model = types && types.length ? types : ["(select category)"]
                var ti = _indexOfInsensitive(types||[], t.task_type||""); if (ti >= 0) typeBox.currentIndex = ti; else typeBox.currentIndex = 0
            } catch(e) {}
            var pi = _indexOfInsensitive(root.lookups.priorities||[], t.priority||""); if (pi >= 0) priorityBox.currentIndex = pi;
            var si = _indexOfInsensitive(root.lookups.task_statuses||[], t.status||""); if (si >= 0) statusBox.currentIndex = si;
            locationField.text = t.location || "";
        } catch (e) { console.log('syncHeaderFromTask error', e) }
    }
    onTaskDetailChanged: syncHeaderFromTask()
}

