# ===== Part 1: Imports & Logging ============================================
import sys
import logging
from typing import Callable

from PySide6.QtWidgets import (
    QApplication,
    QDockWidget,
    QPushButton,
    QMainWindow,
    QMenu,
    QLabel,
    QWidget,
    QVBoxLayout,
    QMessageBox,
)
from PySide6.QtQuickWidgets import QQuickWidget
from PySide6.QtGui import QAction, QKeySequence
from PySide6.QtCore import Qt, QUrl
from PySide6.QtQuick import QQuickView
from PySide6.QtQuickControls2 import QQuickStyle
QQuickStyle.setStyle("Fusion")


# (Panels previously used directly; retained imports in case you still need them elsewhere)
from modules.operations.panels.team_status_panel import TeamStatusPanel
from modules.operations.panels.task_status_panel import TaskStatusPanel

# (QML utilities kept, though handlers now follow panel-factory pattern)
from models.qmlwindow import QmlWindow, new_incident_form, open_incident_list
from utils.state import AppState
from models.database import get_incident_by_number
from bridge.settings_bridge import QmlSettingsBridge
from utils.settingsmanager import SettingsManager

logger = logging.getLogger(__name__)
logging.basicConfig(
    level=logging.DEBUG,
    format="%(asctime)s %(levelname)s [%(name)s] %(message)s"
)


# ===== Part 2: Main Window & Physical Menus (visible UI only) ===============
class MainWindow(QMainWindow):
    """
    Menu-first structure. Every visible menu item has a corresponding handler method,
    and ALL handlers follow the same pattern:
      - import module
      - incident_id = getattr(self, "current_incident_id", None)
      - panel = module.get_*_panel(incident_id)
      - self._open_modeless(panel, title="...")
    Placeholders are fine if a real module/factory doesn't exist yet.
    """
    def __init__(self, settings_manager: SettingsManager | None = None,
                 settings_bridge: QmlSettingsBridge | None = None):
        super().__init__()
        self.setStyleSheet("background-color: #f5f5f5;")
        self._open_windows: list[QWidget] = []  # track modeless windows

        if settings_manager is None:
            settings_manager = SettingsManager()
        if settings_bridge is None:
            settings_bridge = QmlSettingsBridge(settings_manager)
        self.settings_manager = settings_manager
        self.settings_bridge = settings_bridge

        # NEW: create a dockable panel to display active incident information
        self.active_incident_label = QLabel()
        active_widget = QWidget()
        active_layout = QVBoxLayout(active_widget)
        active_layout.addWidget(self.active_incident_label)
        active_layout.addStretch()
        self.active_incident_dock = QDockWidget("Active Incident", self)
        self.active_incident_dock.setWidget(active_widget)
        # Dock this panel on the right side by default (similar to other panels)
        self.addDockWidget(Qt.RightDockWidgetArea, self.active_incident_dock)

        # Initialize the panel with the current incident (if any)
        self.update_active_incident_label()

        # Title includes active incident (if any)
        active_number = AppState.get_active_incident()
        if active_number:
            incident = get_incident_by_number(active_number)
            if incident:
                title = f"SARApp - {incident['number']} | {incident['name']}"
            else:
                title = "SARApp - Incident Management Assistant"
        else:
            title = "SARApp - Incident Management Assistant"
        self.setWindowTitle(title)
        self.resize(1280, 800)

        # Central placeholder
        self.setCentralWidget(QLabel("SARApp Dashboard"))

        # Example dock panels
        dock = QDockWidget("Teams Panel", self)
        dock.setWidget(QPushButton("Open Task Detail"))
        dock.widget().clicked.connect(self.open_task_detail)
        self.addDockWidget(Qt.LeftDockWidgetArea, dock)

        team_panel = TeamStatusPanel()
        dock = QDockWidget("Team Status", self)
        dock.setWidget(team_panel)
        self.addDockWidget(Qt.TopDockWidgetArea, dock)

        task_panel = TaskStatusPanel()
        dock = QDockWidget("Task Status", self)
        dock.setWidget(task_panel)
        self.addDockWidget(Qt.BottomDockWidgetArea, dock)

        # Build the physical menu bar (visible UI)
        self.init_module_menus()

    # ----- Part 2.A: Physical Menu Builder ----------------------------------
    def _add_action(self, menu: QMenu, text: str, keyseq: str | None, module_key: str):
        """Create a QAction, attach module_key, connect to router, and add to menu."""
        act = QAction(text, self)
        if keyseq:
            act.setShortcut(QKeySequence(keyseq))
        act.setData({"module_key": module_key})
        act.triggered.connect(lambda: self.open_module(module_key))
        menu.addAction(act)
        return act

    def init_module_menus(self):
        """Build the entire menu tree in one place; handlers live below."""
        mb = self.menuBar()

        # ----- Menu -----
        m_menu = mb.addMenu("Menu")
        self._add_action(m_menu, "New Incident", "Ctrl+N", "menu.new_incident")
        self._add_action(m_menu, "Open Incident", "Ctrl+O", "menu.open_incident")
        self._add_action(m_menu, "Save Incident", "Ctrl+S", "menu.save_incident")
        self._add_action(m_menu, "Settings", None, "menu.settings")
        m_menu.addSeparator()
        self._add_action(m_menu, "Exit", "Ctrl+Q", "menu.exit")

        # ----- Edit -----
        m_edit = mb.addMenu("Edit")
        self._add_action(m_edit, "EMS and Hospitals", None, "edit.ems_hospitals")
        self._add_action(m_edit, "Canned Communication Entries", None, "edit.canned_comm_entries")
        self._add_action(m_edit, "Personnel", None, "edit.personnel")
        self._add_action(m_edit, "Objectives", None, "edit.objectives")
        self._add_action(m_edit, "Task Types", None, "edit.task_types")
        self._add_action(m_edit, "Team Types", None, "edit.team_types")
        self._add_action(m_edit, "Vehicles", None, "edit.vehicles")
        self._add_action(m_edit, "Equipment", None, "edit.equipment")
        self._add_action(m_edit, "Communications Resources", None, "communications.217")

        # ----- Command -----
        m_cmd = mb.addMenu("Command")
        self._add_action(m_cmd, "Command Unit Log ICS-214", None, "command.unit_log")
        m_cmd.addSeparator()
        self._add_action(m_cmd, "Incident Overview", None, "command.incident_overview")
        self._add_action(m_cmd, "Incident Action Plan Builder", None, "command.iap")
        self._add_action(m_cmd, "Incident Objectives (ICS 202)", None, "command.objectives")
        self._add_action(m_cmd, "Command Staff Organization (ICS 203)", None, "command.staff_org")
        self._add_action(m_cmd, "Situation Report (ICS 209)", None, "command.sitrep")

        # ----- Planning -----
        m_plan = mb.addMenu("Planning")
        self._add_action(m_plan, "Planning Unit Log ICS-214", None, "planning.unit_log")
        m_plan.addSeparator()
        self._add_action(m_plan, "Planning Dashboard", "Ctrl+Alt+D", "planning.dashboard")
        self._add_action(m_plan, "Pending Approvals", None, "planning.approvals")
        self._add_action(m_plan, "Planning Forecast", None, "planning.forecast")
        self._add_action(m_plan, "Operational Period Manager", None, "planning.op_manager")
        self._add_action(m_plan, "Task Metrics Dashboard", None, "planning.taskmetrics")
        self._add_action(m_plan, "Strategic Objective Tracker", None, "planning.strategic_objectives")
        self._add_action(m_plan, "Situation Report", None, "planning.sitrep")

        # ----- Operations -----
        m_ops = mb.addMenu("Operations")
        self._add_action(m_ops, "Operations Unit Log ICS-214", None, "operations.unit_log")
        m_ops.addSeparator()
        self._add_action(m_ops, "Assignments Dashboard", "Ctrl+1", "operations.dashboard")
        self._add_action(m_ops, "Team Assignments", None, "operations.team_assignments")

        # ----- Logistics -----
        m_log = mb.addMenu("Logistics")
        self._add_action(m_log, "Logistics Unit Log ICS-214", None, "logistics.unit_log")
        m_log.addSeparator()
        self._add_action(m_log, "Logistics Dashboard", "Ctrl+L", "logistics.dashboard")
        self._add_action(m_log, "Check-In ICS-211", None, "logistics.211")
        self._add_action(m_log, "Resource Requests", "Ctrl+Shift+R", "logistics.requests")
        self._add_action(m_log, "Equipment Inventory", None, "logistics.equipment")
        self._add_action(m_log, "Resource Requests (ICS-213RR)", None, "logistics.213rr")

        # ----- Communications -----
        m_comms = mb.addMenu("Communications")
        self._add_action(m_comms, "Communications Unit Log ICS-214", None, "comms.unit_log")
        m_comms.addSeparator()
        self._add_action(m_comms, "Messaging", None, "comms.chat")
        self._add_action(m_comms, "ICS 213 Messages", None, "comms.213")
        self._add_action(m_comms, "Communications Plan ICS-205", None, "comms.205")

        # ----- Intel -----
        m_intel = mb.addMenu("Intel")
        self._add_action(m_intel, "Intel Unit Log ICS-214", None, "intel.unit_log")
        m_intel.addSeparator()
        self._add_action(m_intel, "Intel Dashboard", None, "intel.dashboard")
        self._add_action(m_intel, "Clue Log", None, "intel.clue_log")
        self._add_action(m_intel, "Add Clue", None, "intel.add_clue")

        # ----- Medical & Safety -----
        m_med = mb.addMenu("Medical && Safety")
        self._add_action(m_med, "Medical Unit Log ICS-214", None, "medical.unit_log")
        self._add_action(m_med, "Safety Unit Log ICS-214", None, "safety.unit_log")
        m_med.addSeparator()
        self._add_action(m_med, "Medical Plan ICS 206", None, "medical.206")
        self._add_action(m_med, "Safety Message ICS-208", None, "safety.208")
        self._add_action(m_med, "Incident Safety Analysis ICS-215A", None, "safety.215A")
        self._add_action(m_med, "CAP ORM", None, "safety.caporm")

        # ----- Liaison -----
        m_lia = mb.addMenu("Liaison")
        self._add_action(m_lia, "Liaison Unit Log ICS-214", None, "liaison.unit_log")
        m_lia.addSeparator()
